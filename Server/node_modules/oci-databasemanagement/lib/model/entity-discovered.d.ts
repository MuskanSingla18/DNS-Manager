/**
 * Database Management API
 * Use the Database Management API to perform tasks such as obtaining performance and resource usage metrics
for a fleet of Managed Databases or a specific Managed Database, creating Managed Database Groups, and
running a SQL job on a Managed Database or Managed Database Group.

 * OpenAPI spec version: 20201101
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
/**
 * The details of the base entity discovery.
 */
export interface EntityDiscovered {
    /**
     * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the entity discovered.
     */
    "id"?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the agent used for monitoring.
     */
    "agentId"?: string;
    /**
     * The [OCID](https://docs.cloud.oracle.com/Content/General/Concepts/identifiers.htm) of the associated connector.
     */
    "connectorId"?: string;
    /**
     * The name of the entity.
     */
    "displayName": string;
    /**
     * The version of the entity.
     */
    "version"?: string;
    /**
     * The internal identifier of the entity.
     */
    "internalId"?: string;
    /**
     * The status of the entity.
     */
    "status"?: string;
    /**
     * The status of the entity discovery.
     */
    "discoverStatus"?: EntityDiscovered.DiscoverStatus;
    /**
     * The error code of the discovery.
     */
    "discoverErrorCode"?: string;
    /**
     * The error message of the discovery.
     */
    "discoverErrorMsg"?: string;
    "entityType": string;
}
export declare namespace EntityDiscovered {
    enum DiscoverStatus {
        PrevDiscovered = "PREV_DISCOVERED",
        NewDiscovered = "NEW_DISCOVERED",
        NotFound = "NOT_FOUND",
        Discovering = "DISCOVERING"
    }
    function getJsonObj(obj: EntityDiscovered): object;
    function getDeserializedJsonObj(obj: EntityDiscovered): object;
}
