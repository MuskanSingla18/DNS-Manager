"use strict";
/**
 * OS Management Hub API
 * Use the OS Management Hub API to manage and monitor updates and patches for the operating system environments in your private data centers through a single management console. For more information, see [Overview of OS Management Hub](https://docs.cloud.oracle.com/iaas/osmh/doc/overview.htm).

 * OpenAPI spec version: 20220901
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.WorkRequestClient = exports.WorkRequestApiKeys = exports.SoftwareSourceClient = exports.SoftwareSourceApiKeys = exports.ScheduledJobClient = exports.ScheduledJobApiKeys = exports.ReportingManagedInstanceClient = exports.ReportingManagedInstanceApiKeys = exports.OnboardingClient = exports.OnboardingApiKeys = exports.ManagementStationClient = exports.ManagementStationApiKeys = exports.ManagedInstanceGroupClient = exports.ManagedInstanceGroupApiKeys = exports.ManagedInstanceClient = exports.ManagedInstanceApiKeys = exports.LifecycleEnvironmentClient = exports.LifecycleEnvironmentApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const lifecycleenvironment_waiter_1 = require("./lifecycleenvironment-waiter");
const managedinstancegroup_waiter_1 = require("./managedinstancegroup-waiter");
const managementstation_waiter_1 = require("./managementstation-waiter");
const onboarding_waiter_1 = require("./onboarding-waiter");
const scheduledjob_waiter_1 = require("./scheduledjob-waiter");
const softwaresource_waiter_1 = require("./softwaresource-waiter");
const workrequest_waiter_1 = require("./workrequest-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var LifecycleEnvironmentApiKeys;
(function (LifecycleEnvironmentApiKeys) {
})(LifecycleEnvironmentApiKeys = exports.LifecycleEnvironmentApiKeys || (exports.LifecycleEnvironmentApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class LifecycleEnvironmentClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "LifecycleEnvironment";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`LifecycleEnvironmentClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(LifecycleEnvironmentClient.serviceEndpointTemplate, this._region, LifecycleEnvironmentClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(LifecycleEnvironmentClient.serviceEndpointTemplate, this._regionId, LifecycleEnvironmentClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(LifecycleEnvironmentClient.serviceEndpointTemplate, region, LifecycleEnvironmentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(LifecycleEnvironmentClient.serviceEndpointTemplate, regionId, LifecycleEnvironmentClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new LifecycleEnvironmentWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new lifecycleenvironment_waiter_1.LifecycleEnvironmentWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Attach(add) managed instances to a lifecycle stage.
     * Once added operations can be applied to all managed instances in the lifecycle stage.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AttachManagedInstancesToLifecycleStageRequest
     * @return AttachManagedInstancesToLifecycleStageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/AttachManagedInstancesToLifecycleStage.ts.html |here} to see how to use AttachManagedInstancesToLifecycleStage API.
     */
    attachManagedInstancesToLifecycleStage(attachManagedInstancesToLifecycleStageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#attachManagedInstancesToLifecycleStage.");
            const operationName = "attachManagedInstancesToLifecycleStage";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleStageId}": attachManagedInstancesToLifecycleStageRequest.lifecycleStageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachManagedInstancesToLifecycleStageRequest.opcRequestId,
                "opc-retry-token": attachManagedInstancesToLifecycleStageRequest.opcRetryToken,
                "if-match": attachManagedInstancesToLifecycleStageRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachManagedInstancesToLifecycleStageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages/{lifecycleStageId}/actions/attachManagedInstances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachManagedInstancesToLifecycleStageRequest.attachManagedInstancesToLifecycleStageDetails, "AttachManagedInstancesToLifecycleStageDetails", model.AttachManagedInstancesToLifecycleStageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new lifecycle environment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateLifecycleEnvironmentRequest
     * @return CreateLifecycleEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateLifecycleEnvironment.ts.html |here} to see how to use CreateLifecycleEnvironment API.
     */
    createLifecycleEnvironment(createLifecycleEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#createLifecycleEnvironment.");
            const operationName = "createLifecycleEnvironment";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createLifecycleEnvironmentRequest.opcRetryToken,
                "opc-request-id": createLifecycleEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createLifecycleEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleEnvironments",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createLifecycleEnvironmentRequest.createLifecycleEnvironmentDetails, "CreateLifecycleEnvironmentDetails", model.CreateLifecycleEnvironmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleEnvironment",
                    bodyModel: model.LifecycleEnvironment,
                    type: "model.LifecycleEnvironment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a lifecycle environment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteLifecycleEnvironmentRequest
     * @return DeleteLifecycleEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteLifecycleEnvironment.ts.html |here} to see how to use DeleteLifecycleEnvironment API.
     */
    deleteLifecycleEnvironment(deleteLifecycleEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#deleteLifecycleEnvironment.");
            const operationName = "deleteLifecycleEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleEnvironmentId}": deleteLifecycleEnvironmentRequest.lifecycleEnvironmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteLifecycleEnvironmentRequest.ifMatch,
                "opc-request-id": deleteLifecycleEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteLifecycleEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detach(remove) managed instance from a lifecycle stage.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DetachManagedInstancesFromLifecycleStageRequest
     * @return DetachManagedInstancesFromLifecycleStageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DetachManagedInstancesFromLifecycleStage.ts.html |here} to see how to use DetachManagedInstancesFromLifecycleStage API.
     */
    detachManagedInstancesFromLifecycleStage(detachManagedInstancesFromLifecycleStageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#detachManagedInstancesFromLifecycleStage.");
            const operationName = "detachManagedInstancesFromLifecycleStage";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleStageId}": detachManagedInstancesFromLifecycleStageRequest.lifecycleStageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachManagedInstancesFromLifecycleStageRequest.opcRequestId,
                "opc-retry-token": detachManagedInstancesFromLifecycleStageRequest.opcRetryToken,
                "if-match": detachManagedInstancesFromLifecycleStageRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachManagedInstancesFromLifecycleStageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages/{lifecycleStageId}/actions/detachManagedInstances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachManagedInstancesFromLifecycleStageRequest.detachManagedInstancesFromLifecycleStageDetails, "DetachManagedInstancesFromLifecycleStageDetails", model.DetachManagedInstancesFromLifecycleStageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified lifecycle environment.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLifecycleEnvironmentRequest
     * @return GetLifecycleEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetLifecycleEnvironment.ts.html |here} to see how to use GetLifecycleEnvironment API.
     */
    getLifecycleEnvironment(getLifecycleEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#getLifecycleEnvironment.");
            const operationName = "getLifecycleEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleEnvironmentId}": getLifecycleEnvironmentRequest.lifecycleEnvironmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLifecycleEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getLifecycleEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleEnvironment",
                    bodyModel: model.LifecycleEnvironment,
                    type: "model.LifecycleEnvironment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified lifecycle stage.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetLifecycleStageRequest
     * @return GetLifecycleStageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetLifecycleStage.ts.html |here} to see how to use GetLifecycleStage API.
     */
    getLifecycleStage(getLifecycleStageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#getLifecycleStage.");
            const operationName = "getLifecycleStage";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleStageId}": getLifecycleStageRequest.lifecycleStageId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getLifecycleStageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getLifecycleStageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages/{lifecycleStageId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleStage",
                    bodyModel: model.LifecycleStage,
                    type: "model.LifecycleStage",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists lifecycle environments that match the specified compartment or lifecycle environment OCID. Filter the list
     * against a variety of criteria including but not limited to its name, status, architecture, and OS family.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLifecycleEnvironmentsRequest
     * @return ListLifecycleEnvironmentsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListLifecycleEnvironments.ts.html |here} to see how to use ListLifecycleEnvironments API.
     */
    listLifecycleEnvironments(listLifecycleEnvironmentsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#listLifecycleEnvironments.");
            const operationName = "listLifecycleEnvironments";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listLifecycleEnvironmentsRequest.compartmentId,
                "displayName": listLifecycleEnvironmentsRequest.displayName,
                "displayNameContains": listLifecycleEnvironmentsRequest.displayNameContains,
                "lifecycleEnvironmentId": listLifecycleEnvironmentsRequest.lifecycleEnvironmentId,
                "archType": listLifecycleEnvironmentsRequest.archType,
                "osFamily": listLifecycleEnvironmentsRequest.osFamily,
                "limit": listLifecycleEnvironmentsRequest.limit,
                "page": listLifecycleEnvironmentsRequest.page,
                "lifecycleState": listLifecycleEnvironmentsRequest.lifecycleState,
                "sortOrder": listLifecycleEnvironmentsRequest.sortOrder,
                "sortBy": listLifecycleEnvironmentsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLifecycleEnvironmentsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listLifecycleEnvironmentsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleEnvironments",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleEnvironmentCollection",
                    bodyModel: model.LifecycleEnvironmentCollection,
                    type: "model.LifecycleEnvironmentCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists installed packages on managed instances in a specified lifecycle stage. Filter the list against a variety
     * of criteria including but not limited to the package name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLifecycleStageInstalledPackagesRequest
     * @return ListLifecycleStageInstalledPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListLifecycleStageInstalledPackages.ts.html |here} to see how to use ListLifecycleStageInstalledPackages API.
     */
    listLifecycleStageInstalledPackages(listLifecycleStageInstalledPackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#listLifecycleStageInstalledPackages.");
            const operationName = "listLifecycleStageInstalledPackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleStageId}": listLifecycleStageInstalledPackagesRequest.lifecycleStageId
            };
            const queryParams = {
                "compartmentId": listLifecycleStageInstalledPackagesRequest.compartmentId,
                "displayName": listLifecycleStageInstalledPackagesRequest.displayName,
                "displayNameContains": listLifecycleStageInstalledPackagesRequest.displayNameContains,
                "limit": listLifecycleStageInstalledPackagesRequest.limit,
                "page": listLifecycleStageInstalledPackagesRequest.page,
                "lifecycleState": listLifecycleStageInstalledPackagesRequest.lifecycleState,
                "sortOrder": listLifecycleStageInstalledPackagesRequest.sortOrder,
                "sortBy": listLifecycleStageInstalledPackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLifecycleStageInstalledPackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listLifecycleStageInstalledPackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages/{lifecycleStageId}/installedPackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "installedPackageCollection",
                    bodyModel: model.InstalledPackageCollection,
                    type: "model.InstalledPackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists lifecycle stages that match the specified compartment or lifecycle stage OCID. Filter the list against
     * a variety of criteria including but not limited to its name, status, architecture, and OS family.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListLifecycleStagesRequest
     * @return ListLifecycleStagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListLifecycleStages.ts.html |here} to see how to use ListLifecycleStages API.
     */
    listLifecycleStages(listLifecycleStagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#listLifecycleStages.");
            const operationName = "listLifecycleStages";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listLifecycleStagesRequest.compartmentId,
                "displayName": listLifecycleStagesRequest.displayName,
                "displayNameContains": listLifecycleStagesRequest.displayNameContains,
                "lifecycleStageId": listLifecycleStagesRequest.lifecycleStageId,
                "softwareSourceId": listLifecycleStagesRequest.softwareSourceId,
                "archType": listLifecycleStagesRequest.archType,
                "osFamily": listLifecycleStagesRequest.osFamily,
                "limit": listLifecycleStagesRequest.limit,
                "page": listLifecycleStagesRequest.page,
                "lifecycleState": listLifecycleStagesRequest.lifecycleState,
                "sortOrder": listLifecycleStagesRequest.sortOrder,
                "sortBy": listLifecycleStagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listLifecycleStagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listLifecycleStagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleStageCollection",
                    bodyModel: model.LifecycleStageCollection,
                    type: "model.LifecycleStageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the versioned custom software source content
     * for specified lifecycle stage.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PromoteSoftwareSourceToLifecycleStageRequest
     * @return PromoteSoftwareSourceToLifecycleStageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/PromoteSoftwareSourceToLifecycleStage.ts.html |here} to see how to use PromoteSoftwareSourceToLifecycleStage API.
     */
    promoteSoftwareSourceToLifecycleStage(promoteSoftwareSourceToLifecycleStageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#promoteSoftwareSourceToLifecycleStage.");
            const operationName = "promoteSoftwareSourceToLifecycleStage";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleStageId}": promoteSoftwareSourceToLifecycleStageRequest.lifecycleStageId
            };
            const queryParams = {
                "softwareSourceId": promoteSoftwareSourceToLifecycleStageRequest.softwareSourceId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": promoteSoftwareSourceToLifecycleStageRequest.opcRequestId,
                "opc-retry-token": promoteSoftwareSourceToLifecycleStageRequest.opcRetryToken,
                "if-match": promoteSoftwareSourceToLifecycleStageRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, promoteSoftwareSourceToLifecycleStageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleStages/{lifecycleStageId}/actions/promoteSoftwareSource",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(promoteSoftwareSourceToLifecycleStageRequest.promoteSoftwareSourceToLifecycleStageDetails, "PromoteSoftwareSourceToLifecycleStageDetails", model.PromoteSoftwareSourceToLifecycleStageDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified lifecycle environment's name, description, stages, or tags.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateLifecycleEnvironmentRequest
     * @return UpdateLifecycleEnvironmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateLifecycleEnvironment.ts.html |here} to see how to use UpdateLifecycleEnvironment API.
     */
    updateLifecycleEnvironment(updateLifecycleEnvironmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation LifecycleEnvironmentClient#updateLifecycleEnvironment.");
            const operationName = "updateLifecycleEnvironment";
            const apiReferenceLink = "";
            const pathParams = {
                "{lifecycleEnvironmentId}": updateLifecycleEnvironmentRequest.lifecycleEnvironmentId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateLifecycleEnvironmentRequest.ifMatch,
                "opc-request-id": updateLifecycleEnvironmentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateLifecycleEnvironmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/lifecycleEnvironments/{lifecycleEnvironmentId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateLifecycleEnvironmentRequest.updateLifecycleEnvironmentDetails, "UpdateLifecycleEnvironmentDetails", model.UpdateLifecycleEnvironmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "lifecycleEnvironment",
                    bodyModel: model.LifecycleEnvironment,
                    type: "model.LifecycleEnvironment",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.LifecycleEnvironmentClient = LifecycleEnvironmentClient;
LifecycleEnvironmentClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
LifecycleEnvironmentClient.endpointServiceName = "";
var ManagedInstanceApiKeys;
(function (ManagedInstanceApiKeys) {
})(ManagedInstanceApiKeys = exports.ManagedInstanceApiKeys || (exports.ManagedInstanceApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ManagedInstanceClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ManagedInstance";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`ManagedInstanceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagedInstanceClient.serviceEndpointTemplate, this._region, ManagedInstanceClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagedInstanceClient.serviceEndpointTemplate, this._regionId, ManagedInstanceClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagedInstanceClient.serviceEndpointTemplate, region, ManagedInstanceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagedInstanceClient.serviceEndpointTemplate, regionId, ManagedInstanceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Adds software sources to a managed instance. After the software source has been added,
     * then packages from that software source can be installed on the managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AttachSoftwareSourcesToManagedInstanceRequest
     * @return AttachSoftwareSourcesToManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/AttachSoftwareSourcesToManagedInstance.ts.html |here} to see how to use AttachSoftwareSourcesToManagedInstance API.
     */
    attachSoftwareSourcesToManagedInstance(attachSoftwareSourcesToManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#attachSoftwareSourcesToManagedInstance.");
            const operationName = "attachSoftwareSourcesToManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": attachSoftwareSourcesToManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": attachSoftwareSourcesToManagedInstanceRequest.ifMatch,
                "opc-request-id": attachSoftwareSourcesToManagedInstanceRequest.opcRequestId,
                "opc-retry-token": attachSoftwareSourcesToManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachSoftwareSourcesToManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/attachSoftwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachSoftwareSourcesToManagedInstanceRequest.attachSoftwareSourcesToManagedInstanceDetails, "AttachSoftwareSourcesToManagedInstanceDetails", model.AttachSoftwareSourcesToManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes software sources from a managed instance.
     * Packages will no longer be able to be installed from these software sources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DetachSoftwareSourcesFromManagedInstanceRequest
     * @return DetachSoftwareSourcesFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DetachSoftwareSourcesFromManagedInstance.ts.html |here} to see how to use DetachSoftwareSourcesFromManagedInstance API.
     */
    detachSoftwareSourcesFromManagedInstance(detachSoftwareSourcesFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#detachSoftwareSourcesFromManagedInstance.");
            const operationName = "detachSoftwareSourcesFromManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": detachSoftwareSourcesFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": detachSoftwareSourcesFromManagedInstanceRequest.ifMatch,
                "opc-request-id": detachSoftwareSourcesFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": detachSoftwareSourcesFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachSoftwareSourcesFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/detachSoftwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachSoftwareSourcesFromManagedInstanceRequest.detachSoftwareSourcesFromManagedInstanceDetails, "DetachSoftwareSourcesFromManagedInstanceDetails", model.DetachSoftwareSourcesFromManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a module stream on a managed instance.  After the stream is
     * disabled, it is no longer possible to install the profiles that are
     * contained by the stream.  All installed profiles must be removed prior
     * to disabling a module stream.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableModuleStreamOnManagedInstanceRequest
     * @return DisableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DisableModuleStreamOnManagedInstance.ts.html |here} to see how to use DisableModuleStreamOnManagedInstance API.
     */
    disableModuleStreamOnManagedInstance(disableModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#disableModuleStreamOnManagedInstance.");
            const operationName = "disableModuleStreamOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": disableModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": disableModuleStreamOnManagedInstanceRequest.ifMatch,
                "opc-request-id": disableModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": disableModuleStreamOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/disableModuleStreams",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disableModuleStreamOnManagedInstanceRequest.disableModuleStreamOnManagedInstanceDetails, "DisableModuleStreamOnManagedInstanceDetails", model.DisableModuleStreamOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a module stream on a managed instance.  After the stream is
     * enabled, it is possible to install the profiles that are contained
     * by the stream.  Enabling a stream that is already enabled will
     * succeed.  Attempting to enable a different stream for a module that
     * already has a stream enabled results in an error.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableModuleStreamOnManagedInstanceRequest
     * @return EnableModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/EnableModuleStreamOnManagedInstance.ts.html |here} to see how to use EnableModuleStreamOnManagedInstance API.
     */
    enableModuleStreamOnManagedInstance(enableModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#enableModuleStreamOnManagedInstance.");
            const operationName = "enableModuleStreamOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": enableModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": enableModuleStreamOnManagedInstanceRequest.ifMatch,
                "opc-request-id": enableModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": enableModuleStreamOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/enableModuleStreams",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableModuleStreamOnManagedInstanceRequest.enableModuleStreamOnManagedInstanceDetails, "EnableModuleStreamOnManagedInstanceDetails", model.EnableModuleStreamOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified managed instance.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetManagedInstanceRequest
     * @return GetManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetManagedInstance.ts.html |here} to see how to use GetManagedInstance API.
     */
    getManagedInstance(getManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#getManagedInstance.");
            const operationName = "getManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": getManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstance",
                    bodyModel: model.ManagedInstance,
                    type: "model.ManagedInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs a profile for an module stream.  The stream must be
     * enabled before a profile can be installed.  If a module stream
     * defines multiple profiles, each one can be installed independently.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param InstallModuleStreamProfileOnManagedInstanceRequest
     * @return InstallModuleStreamProfileOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/InstallModuleStreamProfileOnManagedInstance.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstance API.
     */
    installModuleStreamProfileOnManagedInstance(installModuleStreamProfileOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#installModuleStreamProfileOnManagedInstance.");
            const operationName = "installModuleStreamProfileOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": installModuleStreamProfileOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": installModuleStreamProfileOnManagedInstanceRequest.ifMatch,
                "opc-request-id": installModuleStreamProfileOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installModuleStreamProfileOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installModuleStreamProfileOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/installStreamProfiles",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(installModuleStreamProfileOnManagedInstanceRequest.installModuleStreamProfileOnManagedInstanceDetails, "InstallModuleStreamProfileOnManagedInstanceDetails", model.InstallModuleStreamProfileOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs packages on a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param InstallPackagesOnManagedInstanceRequest
     * @return InstallPackagesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/InstallPackagesOnManagedInstance.ts.html |here} to see how to use InstallPackagesOnManagedInstance API.
     */
    installPackagesOnManagedInstance(installPackagesOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#installPackagesOnManagedInstance.");
            const operationName = "installPackagesOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": installPackagesOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": installPackagesOnManagedInstanceRequest.ifMatch,
                "opc-request-id": installPackagesOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": installPackagesOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installPackagesOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/installPackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(installPackagesOnManagedInstanceRequest.installPackagesOnManagedInstanceDetails, "InstallPackagesOnManagedInstanceDetails", model.InstallPackagesOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of available packages for a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceAvailablePackagesRequest
     * @return ListManagedInstanceAvailablePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceAvailablePackages.ts.html |here} to see how to use ListManagedInstanceAvailablePackages API.
     */
    listManagedInstanceAvailablePackages(listManagedInstanceAvailablePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceAvailablePackages.");
            const operationName = "listManagedInstanceAvailablePackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceAvailablePackagesRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listManagedInstanceAvailablePackagesRequest.displayName,
                "displayNameContains": listManagedInstanceAvailablePackagesRequest.displayNameContains,
                "compartmentId": listManagedInstanceAvailablePackagesRequest.compartmentId,
                "limit": listManagedInstanceAvailablePackagesRequest.limit,
                "page": listManagedInstanceAvailablePackagesRequest.page,
                "sortOrder": listManagedInstanceAvailablePackagesRequest.sortOrder,
                "sortBy": listManagedInstanceAvailablePackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceAvailablePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceAvailablePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/availablePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "availablePackageCollection",
                    bodyModel: model.AvailablePackageCollection,
                    type: "model.AvailablePackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of available software sources for a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceAvailableSoftwareSourcesRequest
     * @return ListManagedInstanceAvailableSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceAvailableSoftwareSources.ts.html |here} to see how to use ListManagedInstanceAvailableSoftwareSources API.
     */
    listManagedInstanceAvailableSoftwareSources(listManagedInstanceAvailableSoftwareSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceAvailableSoftwareSources.");
            const operationName = "listManagedInstanceAvailableSoftwareSources";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceAvailableSoftwareSourcesRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listManagedInstanceAvailableSoftwareSourcesRequest.displayName,
                "displayNameContains": listManagedInstanceAvailableSoftwareSourcesRequest.displayNameContains,
                "compartmentId": listManagedInstanceAvailableSoftwareSourcesRequest.compartmentId,
                "limit": listManagedInstanceAvailableSoftwareSourcesRequest.limit,
                "page": listManagedInstanceAvailableSoftwareSourcesRequest.page,
                "sortOrder": listManagedInstanceAvailableSoftwareSourcesRequest.sortOrder,
                "sortBy": listManagedInstanceAvailableSoftwareSourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceAvailableSoftwareSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceAvailableSoftwareSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/availableSoftwareSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "availableSoftwareSourceCollection",
                    bodyModel: model.AvailableSoftwareSourceCollection,
                    type: "model.AvailableSoftwareSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of applicable errata on the managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceErrataRequest
     * @return ListManagedInstanceErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceErrata.ts.html |here} to see how to use ListManagedInstanceErrata API.
     */
    listManagedInstanceErrata(listManagedInstanceErrataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceErrata.");
            const operationName = "listManagedInstanceErrata";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceErrataRequest.managedInstanceId
            };
            const queryParams = {
                "advisoryType": listManagedInstanceErrataRequest.advisoryType,
                "name": listManagedInstanceErrataRequest.name,
                "nameContains": listManagedInstanceErrataRequest.nameContains,
                "compartmentId": listManagedInstanceErrataRequest.compartmentId,
                "limit": listManagedInstanceErrataRequest.limit,
                "page": listManagedInstanceErrataRequest.page,
                "sortOrder": listManagedInstanceErrataRequest.sortOrder,
                "sortBy": listManagedInstanceErrataRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceErrataRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceErrataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/errata",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceErratumSummaryCollection",
                    bodyModel: model.ManagedInstanceErratumSummaryCollection,
                    type: "model.ManagedInstanceErratumSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists the packages that are installed on the managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceInstalledPackagesRequest
     * @return ListManagedInstanceInstalledPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceInstalledPackages.ts.html |here} to see how to use ListManagedInstanceInstalledPackages API.
     */
    listManagedInstanceInstalledPackages(listManagedInstanceInstalledPackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceInstalledPackages.");
            const operationName = "listManagedInstanceInstalledPackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceInstalledPackagesRequest.managedInstanceId
            };
            const queryParams = {
                "displayName": listManagedInstanceInstalledPackagesRequest.displayName,
                "displayNameContains": listManagedInstanceInstalledPackagesRequest.displayNameContains,
                "timeInstallDateStart": listManagedInstanceInstalledPackagesRequest.timeInstallDateStart,
                "timeInstallDateEnd": listManagedInstanceInstalledPackagesRequest.timeInstallDateEnd,
                "compartmentId": listManagedInstanceInstalledPackagesRequest.compartmentId,
                "limit": listManagedInstanceInstalledPackagesRequest.limit,
                "page": listManagedInstanceInstalledPackagesRequest.page,
                "sortOrder": listManagedInstanceInstalledPackagesRequest.sortOrder,
                "sortBy": listManagedInstanceInstalledPackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceInstalledPackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceInstalledPackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/installedPackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "installedPackageCollection",
                    bodyModel: model.InstalledPackageCollection,
                    type: "model.InstalledPackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Retrieve a list of modules, along with streams of the modules,
  * from a managed instance.  Filters may be applied to select
  * a subset of modules based on the filter criteria.
  * <p>
  The 'name' attribute filters against the name of a module.
  * It accepts strings of the format \"<string>\".
  * <p>
  The 'nameContains' attribute filters against the name of a module
  * based on partial match. It accepts strings of the format \"<string>\".
  * If this attribute is defined, only matching modules are included
  * in the result set. If it is not defined, the request  is not subject
  * to this filter.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListManagedInstanceModulesRequest
       * @return ListManagedInstanceModulesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceModules.ts.html |here} to see how to use ListManagedInstanceModules API.
       */
    listManagedInstanceModules(listManagedInstanceModulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceModules.");
            const operationName = "listManagedInstanceModules";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceModulesRequest.managedInstanceId
            };
            const queryParams = {
                "compartmentId": listManagedInstanceModulesRequest.compartmentId,
                "name": listManagedInstanceModulesRequest.name,
                "nameContains": listManagedInstanceModulesRequest.nameContains,
                "limit": listManagedInstanceModulesRequest.limit,
                "page": listManagedInstanceModulesRequest.page,
                "sortOrder": listManagedInstanceModulesRequest.sortOrder,
                "sortBy": listManagedInstanceModulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceModulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceModulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/modules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceModuleCollection",
                    bodyModel: model.ManagedInstanceModuleCollection,
                    type: "model.ManagedInstanceModuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of updatable packages for a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceUpdatablePackagesRequest
     * @return ListManagedInstanceUpdatablePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceUpdatablePackages.ts.html |here} to see how to use ListManagedInstanceUpdatablePackages API.
     */
    listManagedInstanceUpdatablePackages(listManagedInstanceUpdatablePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstanceUpdatablePackages.");
            const operationName = "listManagedInstanceUpdatablePackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": listManagedInstanceUpdatablePackagesRequest.managedInstanceId
            };
            const queryParams = {
                "classificationType": listManagedInstanceUpdatablePackagesRequest.classificationType,
                "displayName": listManagedInstanceUpdatablePackagesRequest.displayName,
                "displayNameContains": listManagedInstanceUpdatablePackagesRequest.displayNameContains,
                "advisoryName": listManagedInstanceUpdatablePackagesRequest.advisoryName,
                "compartmentId": listManagedInstanceUpdatablePackagesRequest.compartmentId,
                "limit": listManagedInstanceUpdatablePackagesRequest.limit,
                "page": listManagedInstanceUpdatablePackagesRequest.page,
                "sortOrder": listManagedInstanceUpdatablePackagesRequest.sortOrder,
                "sortBy": listManagedInstanceUpdatablePackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceUpdatablePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceUpdatablePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/updatablePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "updatablePackageCollection",
                    bodyModel: model.UpdatablePackageCollection,
                    type: "model.UpdatablePackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists managed instances that match the specified compartment or managed instance OCID. Filter the list against a variety of criteria including but not limited to its name, status, architecture, and OS version.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstancesRequest
     * @return ListManagedInstancesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstances.ts.html |here} to see how to use ListManagedInstances API.
     */
    listManagedInstances(listManagedInstancesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#listManagedInstances.");
            const operationName = "listManagedInstances";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedInstancesRequest.compartmentId,
                "displayName": listManagedInstancesRequest.displayName,
                "displayNameContains": listManagedInstancesRequest.displayNameContains,
                "managedInstanceId": listManagedInstancesRequest.managedInstanceId,
                "status": listManagedInstancesRequest.status,
                "archType": listManagedInstancesRequest.archType,
                "osFamily": listManagedInstancesRequest.osFamily,
                "isManagementStation": listManagedInstancesRequest.isManagementStation,
                "group": listManagedInstancesRequest.group,
                "groupNotEqualTo": listManagedInstancesRequest.groupNotEqualTo,
                "lifecycleStage": listManagedInstancesRequest.lifecycleStage,
                "lifecycleStageNotEqualTo": listManagedInstancesRequest.lifecycleStageNotEqualTo,
                "isAttachedToGroupOrLifecycleStage": listManagedInstancesRequest.isAttachedToGroupOrLifecycleStage,
                "softwareSourceId": listManagedInstancesRequest.softwareSourceId,
                "advisoryName": listManagedInstancesRequest.advisoryName,
                "limit": listManagedInstancesRequest.limit,
                "page": listManagedInstancesRequest.page,
                "sortOrder": listManagedInstancesRequest.sortOrder,
                "sortBy": listManagedInstancesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstancesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstancesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceCollection",
                    bodyModel: model.ManagedInstanceCollection,
                    type: "model.ManagedInstanceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Perform an operation involving modules, streams, and profiles on a
  * managed instance.  Each operation may enable or disable an arbitrary
  * amount of module streams, and install or remove an arbitrary number
  * of module stream profiles.  When the operation is complete, the
  * state of the modules, streams, and profiles on the managed instance
  * will match the state indicated in the operation.
  * <p>
  Each module stream specified in the list of module streams to enable
  * will be in the \"ENABLED\" state upon completion of the operation.
  * If there was already a stream of that module enabled, any work
  * required to switch from the current stream to the new stream is
  * performed implicitly.
  * <p>
  Each module stream specified in the list of module streams to disable
  * will be in the \"DISABLED\" state upon completion of the operation.
  * Any profiles that are installed for the module stream will be removed
  * as part of the operation.
  * <p>
  Each module stream profile specified in the list of profiles to install
  * will be in the \"INSTALLED\" state upon completion of the operation,
  * indicating that any packages that are part of the profile are installed
  * on the managed instance.  If the module stream containing the profile
  * is not enabled, it will be enabled as part of the operation.  There
  * is an exception when attempting to install a stream of a profile when
  * another stream of the same module is enabled.  It is an error to attempt
  * to install a profile of another module stream, unless enabling the
  * new module stream is explicitly included in this operation.
  * <p>
  Each module stream profile specified in the list of profiles to remove
  * will be in the \"AVAILABLE\" state upon completion of the operation.
  * The status of packages within the profile after the operation is
  * complete is defined by the package manager on the managed instance.
  * <p>
  Operations that contain one or more elements that are not allowed
  * are rejected.
  * <p>
  The result of this request is a work request object.  The returned
  * work request is the parent of a structure of other WorkRequests.  Taken
  * as a whole, this structure indicates the entire set of work to be
  * performed to complete the operation.
  * <p>
  This interface can also be used to perform a dry run of the operation
  * rather than committing it to a managed instance.  If a dry run is
  * requested, the OS Management Hub service will evaluate the operation
  * against the current module, stream, and profile state on the managed
  * instance.  It will calculate the impact of the operation on all
  * modules, streams, and profiles on the managed instance, including those
  * that are implicitly impacted by the operation.
  * <p>
  The WorkRequest resulting from a dry run behaves differently than
  * a WorkRequest resulting from a committable operation.  Dry run
  * WorkRequests are always singletons and never have children.  The
  * impact of the operation is returned using the log and error
  * facilities of work requests.  The impact of operations that are
  * allowed by the OS Management Hub service are communicated as one or
  * more work request log entries.  Operations that are not allowed
  * by the OS Management Hub service are communicated as one or more
  * work request error entries.  Each entry, for either logs or errors,
  * contains a structured message containing the results of one
  * or more operations.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ManageModuleStreamsOnManagedInstanceRequest
       * @return ManageModuleStreamsOnManagedInstanceResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ManageModuleStreamsOnManagedInstance.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstance API.
       */
    manageModuleStreamsOnManagedInstance(manageModuleStreamsOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#manageModuleStreamsOnManagedInstance.");
            const operationName = "manageModuleStreamsOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": manageModuleStreamsOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": manageModuleStreamsOnManagedInstanceRequest.ifMatch,
                "opc-request-id": manageModuleStreamsOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": manageModuleStreamsOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, manageModuleStreamsOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/manageModuleStreams",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(manageModuleStreamsOnManagedInstanceRequest.manageModuleStreamsOnManagedInstanceDetails, "ManageModuleStreamsOnManagedInstanceDetails", model.ManageModuleStreamsOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Refresh all installed and updatable software information on a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RefreshSoftwareOnManagedInstanceRequest
     * @return RefreshSoftwareOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RefreshSoftwareOnManagedInstance.ts.html |here} to see how to use RefreshSoftwareOnManagedInstance API.
     */
    refreshSoftwareOnManagedInstance(refreshSoftwareOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#refreshSoftwareOnManagedInstance.");
            const operationName = "refreshSoftwareOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": refreshSoftwareOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": refreshSoftwareOnManagedInstanceRequest.ifMatch,
                "opc-request-id": refreshSoftwareOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": refreshSoftwareOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, refreshSoftwareOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/refreshSoftware",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a profile for a module stream that is installed on a managed instance.
     * If a module stream is provided, rather than a fully qualified profile, all
     * profiles that have been installed for the module stream will be removed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveModuleStreamProfileFromManagedInstanceRequest
     * @return RemoveModuleStreamProfileFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RemoveModuleStreamProfileFromManagedInstance.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstance API.
     */
    removeModuleStreamProfileFromManagedInstance(removeModuleStreamProfileFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#removeModuleStreamProfileFromManagedInstance.");
            const operationName = "removeModuleStreamProfileFromManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": removeModuleStreamProfileFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removeModuleStreamProfileFromManagedInstanceRequest.ifMatch,
                "opc-request-id": removeModuleStreamProfileFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": removeModuleStreamProfileFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeModuleStreamProfileFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/removeStreamProfiles",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeModuleStreamProfileFromManagedInstanceRequest.removeModuleStreamProfileFromManagedInstanceDetails, "RemoveModuleStreamProfileFromManagedInstanceDetails", model.RemoveModuleStreamProfileFromManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes an installed package from a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemovePackagesFromManagedInstanceRequest
     * @return RemovePackagesFromManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RemovePackagesFromManagedInstance.ts.html |here} to see how to use RemovePackagesFromManagedInstance API.
     */
    removePackagesFromManagedInstance(removePackagesFromManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#removePackagesFromManagedInstance.");
            const operationName = "removePackagesFromManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": removePackagesFromManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": removePackagesFromManagedInstanceRequest.ifMatch,
                "opc-request-id": removePackagesFromManagedInstanceRequest.opcRequestId,
                "opc-retry-token": removePackagesFromManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removePackagesFromManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/removePackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removePackagesFromManagedInstanceRequest.removePackagesFromManagedInstanceDetails, "RemovePackagesFromManagedInstanceDetails", model.RemovePackagesFromManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a new stream for a module that already has a stream enabled.
     * If any profiles or packages from the original module are installed,
     * switching to a new stream will remove the existing packages and
     * install their counterparts in the new stream.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SwitchModuleStreamOnManagedInstanceRequest
     * @return SwitchModuleStreamOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SwitchModuleStreamOnManagedInstance.ts.html |here} to see how to use SwitchModuleStreamOnManagedInstance API.
     */
    switchModuleStreamOnManagedInstance(switchModuleStreamOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#switchModuleStreamOnManagedInstance.");
            const operationName = "switchModuleStreamOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": switchModuleStreamOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": switchModuleStreamOnManagedInstanceRequest.ifMatch,
                "opc-request-id": switchModuleStreamOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": switchModuleStreamOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, switchModuleStreamOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/switchModuleStreams",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(switchModuleStreamOnManagedInstanceRequest.switchModuleStreamOnManagedInstanceDetails, "SwitchModuleStreamOnManagedInstanceDetails", model.SwitchModuleStreamOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Install all of the available package updates for all of the managed instances in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAllPackagesOnManagedInstancesInCompartmentRequest
     * @return UpdateAllPackagesOnManagedInstancesInCompartmentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateAllPackagesOnManagedInstancesInCompartment.ts.html |here} to see how to use UpdateAllPackagesOnManagedInstancesInCompartment API.
     */
    updateAllPackagesOnManagedInstancesInCompartment(updateAllPackagesOnManagedInstancesInCompartmentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#updateAllPackagesOnManagedInstancesInCompartment.");
            const operationName = "updateAllPackagesOnManagedInstancesInCompartment";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateAllPackagesOnManagedInstancesInCompartmentRequest.opcRequestId,
                "opc-retry-token": updateAllPackagesOnManagedInstancesInCompartmentRequest.opcRetryToken,
                "if-match": updateAllPackagesOnManagedInstancesInCompartmentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAllPackagesOnManagedInstancesInCompartmentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/actions/updatePackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateAllPackagesOnManagedInstancesInCompartmentRequest.updateAllPackagesOnManagedInstancesInCompartmentDetails, "UpdateAllPackagesOnManagedInstancesInCompartmentDetails", model.UpdateAllPackagesOnManagedInstancesInCompartmentDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the managed instance.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateManagedInstanceRequest
     * @return UpdateManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateManagedInstance.ts.html |here} to see how to use UpdateManagedInstance API.
     */
    updateManagedInstance(updateManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#updateManagedInstance.");
            const operationName = "updateManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": updateManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagedInstanceRequest.ifMatch,
                "opc-request-id": updateManagedInstanceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedInstanceRequest.updateManagedInstanceDetails, "UpdateManagedInstanceDetails", model.UpdateManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstance",
                    bodyModel: model.ManagedInstance,
                    type: "model.ManagedInstance",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates a package on a managed instance.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdatePackagesOnManagedInstanceRequest
     * @return UpdatePackagesOnManagedInstanceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdatePackagesOnManagedInstance.ts.html |here} to see how to use UpdatePackagesOnManagedInstance API.
     */
    updatePackagesOnManagedInstance(updatePackagesOnManagedInstanceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceClient#updatePackagesOnManagedInstance.");
            const operationName = "updatePackagesOnManagedInstance";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": updatePackagesOnManagedInstanceRequest.managedInstanceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updatePackagesOnManagedInstanceRequest.ifMatch,
                "opc-request-id": updatePackagesOnManagedInstanceRequest.opcRequestId,
                "opc-retry-token": updatePackagesOnManagedInstanceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updatePackagesOnManagedInstanceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/actions/updatePackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updatePackagesOnManagedInstanceRequest.updatePackagesOnManagedInstanceDetails, "UpdatePackagesOnManagedInstanceDetails", model.UpdatePackagesOnManagedInstanceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ManagedInstanceClient = ManagedInstanceClient;
ManagedInstanceClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
ManagedInstanceClient.endpointServiceName = "";
var ManagedInstanceGroupApiKeys;
(function (ManagedInstanceGroupApiKeys) {
})(ManagedInstanceGroupApiKeys = exports.ManagedInstanceGroupApiKeys || (exports.ManagedInstanceGroupApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ManagedInstanceGroupClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ManagedInstanceGroup";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`ManagedInstanceGroupClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagedInstanceGroupClient.serviceEndpointTemplate, this._region, ManagedInstanceGroupClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagedInstanceGroupClient.serviceEndpointTemplate, this._regionId, ManagedInstanceGroupClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagedInstanceGroupClient.serviceEndpointTemplate, region, ManagedInstanceGroupClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagedInstanceGroupClient.serviceEndpointTemplate, regionId, ManagedInstanceGroupClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ManagedInstanceGroupWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new managedinstancegroup_waiter_1.ManagedInstanceGroupWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Adds managed instances to the specified managed instance group. After the managed
     * instances have been added, then operations can be performed on the managed
     * instance group which will then apply to all managed instances in the
     * group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AttachManagedInstancesToManagedInstanceGroupRequest
     * @return AttachManagedInstancesToManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/AttachManagedInstancesToManagedInstanceGroup.ts.html |here} to see how to use AttachManagedInstancesToManagedInstanceGroup API.
     */
    attachManagedInstancesToManagedInstanceGroup(attachManagedInstancesToManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#attachManagedInstancesToManagedInstanceGroup.");
            const operationName = "attachManagedInstancesToManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": attachManagedInstancesToManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachManagedInstancesToManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": attachManagedInstancesToManagedInstanceGroupRequest.opcRetryToken,
                "if-match": attachManagedInstancesToManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachManagedInstancesToManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachManagedInstances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachManagedInstancesToManagedInstanceGroupRequest.attachManagedInstancesToManagedInstanceGroupDetails, "AttachManagedInstancesToManagedInstanceGroupDetails", model.AttachManagedInstancesToManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Attaches software sources to the specified managed instance group. The software sources must be compatible with the content for the managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param AttachSoftwareSourcesToManagedInstanceGroupRequest
     * @return AttachSoftwareSourcesToManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/AttachSoftwareSourcesToManagedInstanceGroup.ts.html |here} to see how to use AttachSoftwareSourcesToManagedInstanceGroup API.
     */
    attachSoftwareSourcesToManagedInstanceGroup(attachSoftwareSourcesToManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#attachSoftwareSourcesToManagedInstanceGroup.");
            const operationName = "attachSoftwareSourcesToManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": attachSoftwareSourcesToManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": attachSoftwareSourcesToManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": attachSoftwareSourcesToManagedInstanceGroupRequest.opcRetryToken,
                "if-match": attachSoftwareSourcesToManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, attachSoftwareSourcesToManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/attachSoftwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(attachSoftwareSourcesToManagedInstanceGroupRequest.attachSoftwareSourcesToManagedInstanceGroupDetails, "AttachSoftwareSourcesToManagedInstanceGroupDetails", model.AttachSoftwareSourcesToManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateManagedInstanceGroupRequest
     * @return CreateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateManagedInstanceGroup.ts.html |here} to see how to use CreateManagedInstanceGroup API.
     */
    createManagedInstanceGroup(createManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#createManagedInstanceGroup.");
            const operationName = "createManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createManagedInstanceGroupRequest.opcRetryToken,
                "opc-request-id": createManagedInstanceGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagedInstanceGroupRequest.createManagedInstanceGroupDetails, "CreateManagedInstanceGroupDetails", model.CreateManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specified managed instance group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteManagedInstanceGroupRequest
     * @return DeleteManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteManagedInstanceGroup.ts.html |here} to see how to use DeleteManagedInstanceGroup API.
     */
    deleteManagedInstanceGroup(deleteManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#deleteManagedInstanceGroup.");
            const operationName = "deleteManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": deleteManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagedInstanceGroupRequest.ifMatch,
                "opc-request-id": deleteManagedInstanceGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a managed instance from the specified managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DetachManagedInstancesFromManagedInstanceGroupRequest
     * @return DetachManagedInstancesFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DetachManagedInstancesFromManagedInstanceGroup.ts.html |here} to see how to use DetachManagedInstancesFromManagedInstanceGroup API.
     */
    detachManagedInstancesFromManagedInstanceGroup(detachManagedInstancesFromManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#detachManagedInstancesFromManagedInstanceGroup.");
            const operationName = "detachManagedInstancesFromManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": detachManagedInstancesFromManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachManagedInstancesFromManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": detachManagedInstancesFromManagedInstanceGroupRequest.opcRetryToken,
                "if-match": detachManagedInstancesFromManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachManagedInstancesFromManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachManagedInstances",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachManagedInstancesFromManagedInstanceGroupRequest.detachManagedInstancesFromManagedInstanceGroupDetails, "DetachManagedInstancesFromManagedInstanceGroupDetails", model.DetachManagedInstancesFromManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Detaches software sources from a group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DetachSoftwareSourcesFromManagedInstanceGroupRequest
     * @return DetachSoftwareSourcesFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DetachSoftwareSourcesFromManagedInstanceGroup.ts.html |here} to see how to use DetachSoftwareSourcesFromManagedInstanceGroup API.
     */
    detachSoftwareSourcesFromManagedInstanceGroup(detachSoftwareSourcesFromManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#detachSoftwareSourcesFromManagedInstanceGroup.");
            const operationName = "detachSoftwareSourcesFromManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": detachSoftwareSourcesFromManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": detachSoftwareSourcesFromManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": detachSoftwareSourcesFromManagedInstanceGroupRequest.opcRetryToken,
                "if-match": detachSoftwareSourcesFromManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, detachSoftwareSourcesFromManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/detachSoftwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(detachSoftwareSourcesFromManagedInstanceGroupRequest.detachSoftwareSourcesFromManagedInstanceGroupDetails, "DetachSoftwareSourcesFromManagedInstanceGroupDetails", model.DetachSoftwareSourcesFromManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Disables a module stream on a managed instance group. After the stream is
     * disabled, it is no longer possible to install the profiles that are
     * contained by the stream. All installed profiles must be removed prior
     * to disabling a module stream.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DisableModuleStreamOnManagedInstanceGroupRequest
     * @return DisableModuleStreamOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DisableModuleStreamOnManagedInstanceGroup.ts.html |here} to see how to use DisableModuleStreamOnManagedInstanceGroup API.
     */
    disableModuleStreamOnManagedInstanceGroup(disableModuleStreamOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#disableModuleStreamOnManagedInstanceGroup.");
            const operationName = "disableModuleStreamOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": disableModuleStreamOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": disableModuleStreamOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": disableModuleStreamOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": disableModuleStreamOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, disableModuleStreamOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/disableModuleStream",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(disableModuleStreamOnManagedInstanceGroupRequest.disableModuleStreamOnManagedInstanceGroupDetails, "DisableModuleStreamOnManagedInstanceGroupDetails", model.DisableModuleStreamOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Enables a module stream on a managed instance group.  After the stream is
     * enabled, it is possible to install the profiles that are contained
     * by the stream.  Enabling a stream that is already enabled will
     * succeed.  Attempting to enable a different stream for a module that
     * already has a stream enabled results in an error.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param EnableModuleStreamOnManagedInstanceGroupRequest
     * @return EnableModuleStreamOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/EnableModuleStreamOnManagedInstanceGroup.ts.html |here} to see how to use EnableModuleStreamOnManagedInstanceGroup API.
     */
    enableModuleStreamOnManagedInstanceGroup(enableModuleStreamOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#enableModuleStreamOnManagedInstanceGroup.");
            const operationName = "enableModuleStreamOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": enableModuleStreamOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": enableModuleStreamOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": enableModuleStreamOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": enableModuleStreamOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, enableModuleStreamOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/enableModuleStream",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(enableModuleStreamOnManagedInstanceGroupRequest.enableModuleStreamOnManagedInstanceGroupDetails, "EnableModuleStreamOnManagedInstanceGroupDetails", model.EnableModuleStreamOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified managed instance group.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetManagedInstanceGroupRequest
     * @return GetManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetManagedInstanceGroup.ts.html |here} to see how to use GetManagedInstanceGroup API.
     */
    getManagedInstanceGroup(getManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#getManagedInstanceGroup.");
            const operationName = "getManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": getManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs a profile for an module stream. The stream must be
     * enabled before a profile can be installed. If a module stream
     * defines multiple profiles, each one can be installed independently.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param InstallModuleStreamProfileOnManagedInstanceGroupRequest
     * @return InstallModuleStreamProfileOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/InstallModuleStreamProfileOnManagedInstanceGroup.ts.html |here} to see how to use InstallModuleStreamProfileOnManagedInstanceGroup API.
     */
    installModuleStreamProfileOnManagedInstanceGroup(installModuleStreamProfileOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#installModuleStreamProfileOnManagedInstanceGroup.");
            const operationName = "installModuleStreamProfileOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": installModuleStreamProfileOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installModuleStreamProfileOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": installModuleStreamProfileOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": installModuleStreamProfileOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installModuleStreamProfileOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/installStreamProfile",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(installModuleStreamProfileOnManagedInstanceGroupRequest.installModuleStreamProfileOnManagedInstanceGroupDetails, "InstallModuleStreamProfileOnManagedInstanceGroupDetails", model.InstallModuleStreamProfileOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Installs package(s) on each managed instance in a managed instance group. The package must be compatible with the
     * instances in the managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param InstallPackagesOnManagedInstanceGroupRequest
     * @return InstallPackagesOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/InstallPackagesOnManagedInstanceGroup.ts.html |here} to see how to use InstallPackagesOnManagedInstanceGroup API.
     */
    installPackagesOnManagedInstanceGroup(installPackagesOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#installPackagesOnManagedInstanceGroup.");
            const operationName = "installPackagesOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": installPackagesOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": installPackagesOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": installPackagesOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": installPackagesOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, installPackagesOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/installPackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(installPackagesOnManagedInstanceGroupRequest.installPackagesOnManagedInstanceGroupDetails, "InstallPackagesOnManagedInstanceGroupDetails", model.InstallPackagesOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists available modules that for the specified managed instance group. Filter the list against a variety of
     * criteria including but not limited to its name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupAvailableModulesRequest
     * @return ListManagedInstanceGroupAvailableModulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroupAvailableModules.ts.html |here} to see how to use ListManagedInstanceGroupAvailableModules API.
     */
    listManagedInstanceGroupAvailableModules(listManagedInstanceGroupAvailableModulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailableModules.");
            const operationName = "listManagedInstanceGroupAvailableModules";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": listManagedInstanceGroupAvailableModulesRequest.managedInstanceGroupId
            };
            const queryParams = {
                "compartmentId": listManagedInstanceGroupAvailableModulesRequest.compartmentId,
                "name": listManagedInstanceGroupAvailableModulesRequest.name,
                "nameContains": listManagedInstanceGroupAvailableModulesRequest.nameContains,
                "limit": listManagedInstanceGroupAvailableModulesRequest.limit,
                "page": listManagedInstanceGroupAvailableModulesRequest.page,
                "sortOrder": listManagedInstanceGroupAvailableModulesRequest.sortOrder,
                "sortBy": listManagedInstanceGroupAvailableModulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupAvailableModulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupAvailableModulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/availableModules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroupAvailableModuleCollection",
                    bodyModel: model.ManagedInstanceGroupAvailableModuleCollection,
                    type: "model.ManagedInstanceGroupAvailableModuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists available packages on the specified managed instances group. Filter the list against a variety
     * of criteria including but not limited to the package name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupAvailablePackagesRequest
     * @return ListManagedInstanceGroupAvailablePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroupAvailablePackages.ts.html |here} to see how to use ListManagedInstanceGroupAvailablePackages API.
     */
    listManagedInstanceGroupAvailablePackages(listManagedInstanceGroupAvailablePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailablePackages.");
            const operationName = "listManagedInstanceGroupAvailablePackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": listManagedInstanceGroupAvailablePackagesRequest.managedInstanceGroupId
            };
            const queryParams = {
                "displayName": listManagedInstanceGroupAvailablePackagesRequest.displayName,
                "displayNameContains": listManagedInstanceGroupAvailablePackagesRequest.displayNameContains,
                "compartmentId": listManagedInstanceGroupAvailablePackagesRequest.compartmentId,
                "limit": listManagedInstanceGroupAvailablePackagesRequest.limit,
                "page": listManagedInstanceGroupAvailablePackagesRequest.page,
                "sortOrder": listManagedInstanceGroupAvailablePackagesRequest.sortOrder,
                "sortBy": listManagedInstanceGroupAvailablePackagesRequest.sortBy,
                "isLatest": listManagedInstanceGroupAvailablePackagesRequest.isLatest
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupAvailablePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupAvailablePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/availablePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroupAvailablePackageCollection",
                    bodyModel: model.ManagedInstanceGroupAvailablePackageCollection,
                    type: "model.ManagedInstanceGroupAvailablePackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists available software sources for a specified managed instance group. Filter the list against a variety of
     * criteria including but not limited to its name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupAvailableSoftwareSourcesRequest
     * @return ListManagedInstanceGroupAvailableSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroupAvailableSoftwareSources.ts.html |here} to see how to use ListManagedInstanceGroupAvailableSoftwareSources API.
     */
    listManagedInstanceGroupAvailableSoftwareSources(listManagedInstanceGroupAvailableSoftwareSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupAvailableSoftwareSources.");
            const operationName = "listManagedInstanceGroupAvailableSoftwareSources";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": listManagedInstanceGroupAvailableSoftwareSourcesRequest.managedInstanceGroupId
            };
            const queryParams = {
                "displayName": listManagedInstanceGroupAvailableSoftwareSourcesRequest.displayName,
                "displayNameContains": listManagedInstanceGroupAvailableSoftwareSourcesRequest.displayNameContains,
                "compartmentId": listManagedInstanceGroupAvailableSoftwareSourcesRequest.compartmentId,
                "limit": listManagedInstanceGroupAvailableSoftwareSourcesRequest.limit,
                "page": listManagedInstanceGroupAvailableSoftwareSourcesRequest.page,
                "sortOrder": listManagedInstanceGroupAvailableSoftwareSourcesRequest.sortOrder,
                "sortBy": listManagedInstanceGroupAvailableSoftwareSourcesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupAvailableSoftwareSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupAvailableSoftwareSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/availableSoftwareSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "availableSoftwareSourceCollection",
                    bodyModel: model.AvailableSoftwareSourceCollection,
                    type: "model.AvailableSoftwareSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists installed packages on the specified managed instances group. Filter the list against a variety
     * of criteria including but not limited to the package name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupInstalledPackagesRequest
     * @return ListManagedInstanceGroupInstalledPackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroupInstalledPackages.ts.html |here} to see how to use ListManagedInstanceGroupInstalledPackages API.
     */
    listManagedInstanceGroupInstalledPackages(listManagedInstanceGroupInstalledPackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupInstalledPackages.");
            const operationName = "listManagedInstanceGroupInstalledPackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": listManagedInstanceGroupInstalledPackagesRequest.managedInstanceGroupId
            };
            const queryParams = {
                "displayName": listManagedInstanceGroupInstalledPackagesRequest.displayName,
                "displayNameContains": listManagedInstanceGroupInstalledPackagesRequest.displayNameContains,
                "timeInstallDateStart": listManagedInstanceGroupInstalledPackagesRequest.timeInstallDateStart,
                "timeInstallDateEnd": listManagedInstanceGroupInstalledPackagesRequest.timeInstallDateEnd,
                "compartmentId": listManagedInstanceGroupInstalledPackagesRequest.compartmentId,
                "limit": listManagedInstanceGroupInstalledPackagesRequest.limit,
                "page": listManagedInstanceGroupInstalledPackagesRequest.page,
                "sortOrder": listManagedInstanceGroupInstalledPackagesRequest.sortOrder,
                "sortBy": listManagedInstanceGroupInstalledPackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupInstalledPackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupInstalledPackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/installedPackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroupInstalledPackageCollection",
                    bodyModel: model.ManagedInstanceGroupInstalledPackageCollection,
                    type: "model.ManagedInstanceGroupInstalledPackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Retrieve a list of module streams, along with a summary of their
  * status, from a managed instance group.  Filters may be applied to select
  * a subset of module streams based on the filter criteria.
  * <p>
  The 'moduleName' attribute filters against the name of a module.
  * It accepts strings of the format \"<module>\".  If this attribute
  * is defined, only streams that belong to the specified module are
  * included in the result set.  If it is not defined, the request is
  * not subject to this filter.
  * <p>
  The \"status\" attribute filters against the state of a module stream.
  * Valid values are \"ENABLED\", \"DISABLED\", and \"ACTIVE\".  If the
  * attribute is set to \"ENABLED\", only module streams that are enabled
  * are included in the result set.  If the attribute is set to \"DISABLED\",
  * only module streams that are not enabled are included in the result
  * set.  If the attribute is set to \"ACTIVE\", only module streams that
  * are active are included in the result set.  If the attribute is not
  * defined, the request is not subject to this filter.
  * <p>
  When sorting by the display name, the result set is sorted first
  * by the module name and then by the stream name.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ListManagedInstanceGroupModulesRequest
       * @return ListManagedInstanceGroupModulesResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroupModules.ts.html |here} to see how to use ListManagedInstanceGroupModules API.
       */
    listManagedInstanceGroupModules(listManagedInstanceGroupModulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroupModules.");
            const operationName = "listManagedInstanceGroupModules";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": listManagedInstanceGroupModulesRequest.managedInstanceGroupId
            };
            const queryParams = {
                "compartmentId": listManagedInstanceGroupModulesRequest.compartmentId,
                "name": listManagedInstanceGroupModulesRequest.name,
                "nameContains": listManagedInstanceGroupModulesRequest.nameContains,
                "streamName": listManagedInstanceGroupModulesRequest.streamName,
                "limit": listManagedInstanceGroupModulesRequest.limit,
                "page": listManagedInstanceGroupModulesRequest.page,
                "sortOrder": listManagedInstanceGroupModulesRequest.sortOrder,
                "sortBy": listManagedInstanceGroupModulesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupModulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupModulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/modules",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroupModuleCollection",
                    bodyModel: model.ManagedInstanceGroupModuleCollection,
                    type: "model.ManagedInstanceGroupModuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists managed instance groups that match the specified compartment or managed instance group OCID. Filter the
     * list against a variety of criteria including but not limited to its name, status, architecture, and OS family.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagedInstanceGroupsRequest
     * @return ListManagedInstanceGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagedInstanceGroups.ts.html |here} to see how to use ListManagedInstanceGroups API.
     */
    listManagedInstanceGroups(listManagedInstanceGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#listManagedInstanceGroups.");
            const operationName = "listManagedInstanceGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagedInstanceGroupsRequest.compartmentId,
                "managedInstanceGroupId": listManagedInstanceGroupsRequest.managedInstanceGroupId,
                "softwareSourceId": listManagedInstanceGroupsRequest.softwareSourceId,
                "displayName": listManagedInstanceGroupsRequest.displayName,
                "displayNameContains": listManagedInstanceGroupsRequest.displayNameContains,
                "archType": listManagedInstanceGroupsRequest.archType,
                "osFamily": listManagedInstanceGroupsRequest.osFamily,
                "limit": listManagedInstanceGroupsRequest.limit,
                "page": listManagedInstanceGroupsRequest.page,
                "lifecycleState": listManagedInstanceGroupsRequest.lifecycleState,
                "sortOrder": listManagedInstanceGroupsRequest.sortOrder,
                "sortBy": listManagedInstanceGroupsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagedInstanceGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagedInstanceGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroupCollection",
                    bodyModel: model.ManagedInstanceGroupCollection,
                    type: "model.ManagedInstanceGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
       * Perform an operation involving modules, streams, and profiles on a
  * managed instance group.  Each operation may enable or disable an arbitrary
  * amount of module streams, and install or remove an arbitrary number
  * of module stream profiles.  When the operation is complete, the
  * state of the modules, streams, and profiles on the managed instance group
  * will match the state indicated in the operation.
  * <p>
  Each module stream specified in the list of module streams to enable
  * will be in the \"ENABLED\" state upon completion of the operation.
  * If there was already a stream of that module enabled, any work
  * required to switch from the current stream to the new stream is
  * performed implicitly.
  * <p>
  Each module stream specified in the list of module streams to disable
  * will be in the \"DISABLED\" state upon completion of the operation.
  * Any profiles that are installed for the module stream will be removed
  * as part of the operation.
  * <p>
  Each module stream profile specified in the list of profiles to install
  * will be in the \"INSTALLED\" state upon completion of the operation,
  * indicating that any packages that are part of the profile are installed
  * on the managed instance.  If the module stream containing the profile
  * is not enabled, it will be enabled as part of the operation. There
  * is an exception when attempting to install a stream of a profile when
  * another stream of the same module is enabled.  It is an error to attempt
  * to install a profile of another module stream, unless enabling the
  * new module stream is explicitly included in this operation.
  * <p>
  Each module stream profile specified in the list of profiles to remove
  * will be in the \"AVAILABLE\" state upon completion of the operation.
  * The status of packages within the profile after the operation is
  * complete is defined by the package manager on the managed instance group.
  * <p>
  Operations that contain one or more elements that are not allowed
  * are rejected.
  * <p>
  The result of this request is a work request object. The returned
  * work request is the parent of a structure of other work requests.  Taken
  * as a whole, this structure indicates the entire set of work to be
  * performed to complete the operation.
  * <p>
  This interface can also be used to perform a dry run of the operation
  * rather than committing it to a managed instance group.  If a dry run is
  * requested, the OS Management Hub service will evaluate the operation
  * against the current module, stream, and profile state on the managed
  * instance.  It will calculate the impact of the operation on all
  * modules, streams, and profiles on the managed instance, including those
  * that are implicitly impacted by the operation.
  * <p>
  The work request resulting from a dry run behaves differently than
  * a work request resulting from a committable operation.  Dry run
  * work requests are always singletons and never have children. The
  * impact of the operation is returned using the log and error
  * facilities of work requests. The impact of operations that are
  * allowed by the OS Management Hub service are communicated as one or
  * more work request log entries.  Operations that are not allowed
  * by the OS Management Hub service are communicated as one or more
  * work request error entries.  Each entry, for either logs or errors,
  * contains a structured message containing the results of one
  * or more operations.
  *
       * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
       * @param ManageModuleStreamsOnManagedInstanceGroupRequest
       * @return ManageModuleStreamsOnManagedInstanceGroupResponse
       * @throws OciError when an error occurs
       * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ManageModuleStreamsOnManagedInstanceGroup.ts.html |here} to see how to use ManageModuleStreamsOnManagedInstanceGroup API.
       */
    manageModuleStreamsOnManagedInstanceGroup(manageModuleStreamsOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#manageModuleStreamsOnManagedInstanceGroup.");
            const operationName = "manageModuleStreamsOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": manageModuleStreamsOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": manageModuleStreamsOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": manageModuleStreamsOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": manageModuleStreamsOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, manageModuleStreamsOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/manageModuleStreams",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(manageModuleStreamsOnManagedInstanceGroupRequest.manageModuleStreamsOnManagedInstanceGroupDetails, "ManageModuleStreamsOnManagedInstanceGroupDetails", model.ManageModuleStreamsOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes a profile for a module stream that is installed on a managed instance group.
     * If a module stream is provided, rather than a fully qualified profile, all
     * profiles that have been installed for the module stream will be removed.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemoveModuleStreamProfileFromManagedInstanceGroupRequest
     * @return RemoveModuleStreamProfileFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RemoveModuleStreamProfileFromManagedInstanceGroup.ts.html |here} to see how to use RemoveModuleStreamProfileFromManagedInstanceGroup API.
     */
    removeModuleStreamProfileFromManagedInstanceGroup(removeModuleStreamProfileFromManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#removeModuleStreamProfileFromManagedInstanceGroup.");
            const operationName = "removeModuleStreamProfileFromManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": removeModuleStreamProfileFromManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removeModuleStreamProfileFromManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": removeModuleStreamProfileFromManagedInstanceGroupRequest.opcRetryToken,
                "if-match": removeModuleStreamProfileFromManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removeModuleStreamProfileFromManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/removeStreamProfile",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removeModuleStreamProfileFromManagedInstanceGroupRequest.removeModuleStreamProfileFromManagedInstanceGroupDetails, "RemoveModuleStreamProfileFromManagedInstanceGroupDetails", model.RemoveModuleStreamProfileFromManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Removes package(s) from each managed instance in a specified managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RemovePackagesFromManagedInstanceGroupRequest
     * @return RemovePackagesFromManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RemovePackagesFromManagedInstanceGroup.ts.html |here} to see how to use RemovePackagesFromManagedInstanceGroup API.
     */
    removePackagesFromManagedInstanceGroup(removePackagesFromManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#removePackagesFromManagedInstanceGroup.");
            const operationName = "removePackagesFromManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": removePackagesFromManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": removePackagesFromManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": removePackagesFromManagedInstanceGroupRequest.opcRetryToken,
                "if-match": removePackagesFromManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, removePackagesFromManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/removePackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(removePackagesFromManagedInstanceGroupRequest.removePackagesFromManagedInstanceGroupDetails, "RemovePackagesFromManagedInstanceGroupDetails", model.RemovePackagesFromManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates all packages on each managed instance in the specified managed instance group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateAllPackagesOnManagedInstanceGroupRequest
     * @return UpdateAllPackagesOnManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateAllPackagesOnManagedInstanceGroup.ts.html |here} to see how to use UpdateAllPackagesOnManagedInstanceGroup API.
     */
    updateAllPackagesOnManagedInstanceGroup(updateAllPackagesOnManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#updateAllPackagesOnManagedInstanceGroup.");
            const operationName = "updateAllPackagesOnManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": updateAllPackagesOnManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateAllPackagesOnManagedInstanceGroupRequest.opcRequestId,
                "opc-retry-token": updateAllPackagesOnManagedInstanceGroupRequest.opcRetryToken,
                "if-match": updateAllPackagesOnManagedInstanceGroupRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateAllPackagesOnManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}/actions/updateAllPackages",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(updateAllPackagesOnManagedInstanceGroupRequest.updateAllPackagesOnManagedInstanceGroupDetails, "UpdateAllPackagesOnManagedInstanceGroupDetails", model.UpdateAllPackagesOnManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified managed instance group's name, description, and tags.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateManagedInstanceGroupRequest
     * @return UpdateManagedInstanceGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateManagedInstanceGroup.ts.html |here} to see how to use UpdateManagedInstanceGroup API.
     */
    updateManagedInstanceGroup(updateManagedInstanceGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagedInstanceGroupClient#updateManagedInstanceGroup.");
            const operationName = "updateManagedInstanceGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceGroupId}": updateManagedInstanceGroupRequest.managedInstanceGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagedInstanceGroupRequest.ifMatch,
                "opc-request-id": updateManagedInstanceGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagedInstanceGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceGroups/{managedInstanceGroupId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagedInstanceGroupRequest.updateManagedInstanceGroupDetails, "UpdateManagedInstanceGroupDetails", model.UpdateManagedInstanceGroupDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceGroup",
                    bodyModel: model.ManagedInstanceGroup,
                    type: "model.ManagedInstanceGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ManagedInstanceGroupClient = ManagedInstanceGroupClient;
ManagedInstanceGroupClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
ManagedInstanceGroupClient.endpointServiceName = "";
var ManagementStationApiKeys;
(function (ManagementStationApiKeys) {
})(ManagementStationApiKeys = exports.ManagementStationApiKeys || (exports.ManagementStationApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ManagementStationClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ManagementStation";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`ManagementStationClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagementStationClient.serviceEndpointTemplate, this._region, ManagementStationClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagementStationClient.serviceEndpointTemplate, this._regionId, ManagementStationClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ManagementStationClient.serviceEndpointTemplate, region, ManagementStationClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ManagementStationClient.serviceEndpointTemplate, regionId, ManagementStationClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ManagementStationWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new managementstation_waiter_1.ManagementStationWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Creates a management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateManagementStationRequest
     * @return CreateManagementStationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateManagementStation.ts.html |here} to see how to use CreateManagementStation API.
     */
    createManagementStation(createManagementStationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#createManagementStation.");
            const operationName = "createManagementStation";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createManagementStationRequest.opcRetryToken,
                "opc-request-id": createManagementStationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createManagementStationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createManagementStationRequest.createManagementStationDetails, "CreateManagementStationDetails", model.CreateManagementStationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementStation",
                    bodyModel: model.ManagementStation,
                    type: "model.ManagementStation",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteManagementStationRequest
     * @return DeleteManagementStationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteManagementStation.ts.html |here} to see how to use DeleteManagementStation API.
     */
    deleteManagementStation(deleteManagementStationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#deleteManagementStation.");
            const operationName = "deleteManagementStation";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": deleteManagementStationRequest.managementStationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteManagementStationRequest.ifMatch,
                "opc-request-id": deleteManagementStationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteManagementStationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetManagementStationRequest
     * @return GetManagementStationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetManagementStation.ts.html |here} to see how to use GetManagementStation API.
     */
    getManagementStation(getManagementStationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#getManagementStation.");
            const operationName = "getManagementStation";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": getManagementStationRequest.managementStationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagementStationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagementStationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementStation",
                    bodyModel: model.ManagementStation,
                    type: "model.ManagementStation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists management stations in a compartment.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListManagementStationsRequest
     * @return ListManagementStationsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListManagementStations.ts.html |here} to see how to use ListManagementStations API.
     */
    listManagementStations(listManagementStationsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#listManagementStations.");
            const operationName = "listManagementStations";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listManagementStationsRequest.compartmentId,
                "displayName": listManagementStationsRequest.displayName,
                "displayNameContains": listManagementStationsRequest.displayNameContains,
                "lifecycleState": listManagementStationsRequest.lifecycleState,
                "managedInstanceId": listManagementStationsRequest.managedInstanceId,
                "limit": listManagementStationsRequest.limit,
                "page": listManagementStationsRequest.page,
                "sortOrder": listManagementStationsRequest.sortOrder,
                "sortBy": listManagementStationsRequest.sortBy,
                "id": listManagementStationsRequest.id
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listManagementStationsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listManagementStationsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementStationCollection",
                    bodyModel: model.ManagementStationCollection,
                    type: "model.ManagementStationCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all software source mirrors associated with a specified management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListMirrorsRequest
     * @return ListMirrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListMirrors.ts.html |here} to see how to use ListMirrors API.
     */
    listMirrors(listMirrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#listMirrors.");
            const operationName = "listMirrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": listMirrorsRequest.managementStationId
            };
            const queryParams = {
                "displayName": listMirrorsRequest.displayName,
                "displayNameContains": listMirrorsRequest.displayNameContains,
                "limit": listMirrorsRequest.limit,
                "page": listMirrorsRequest.page,
                "sortOrder": listMirrorsRequest.sortOrder,
                "sortBy": listMirrorsRequest.sortBy,
                "mirrorStates": listMirrorsRequest.mirrorStates
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listMirrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listMirrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}/mirrors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "mirrorsCollection",
                    bodyModel: model.MirrorsCollection,
                    type: "model.MirrorsCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Synchronizes the specified mirrors associated with the management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SynchronizeMirrorsRequest
     * @return SynchronizeMirrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SynchronizeMirrors.ts.html |here} to see how to use SynchronizeMirrors API.
     */
    synchronizeMirrors(synchronizeMirrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#synchronizeMirrors.");
            const operationName = "synchronizeMirrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": synchronizeMirrorsRequest.managementStationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": synchronizeMirrorsRequest.ifMatch,
                "opc-request-id": synchronizeMirrorsRequest.opcRequestId,
                "opc-retry-token": synchronizeMirrorsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, synchronizeMirrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}/actions/synchronizeMirrors",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(synchronizeMirrorsRequest.synchronizeMirrorsDetails, "SynchronizeMirrorsDetails", model.SynchronizeMirrorsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Synchronize the specified mirror associated with a management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SynchronizeSingleMirrorsRequest
     * @return SynchronizeSingleMirrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SynchronizeSingleMirrors.ts.html |here} to see how to use SynchronizeSingleMirrors API.
     */
    synchronizeSingleMirrors(synchronizeSingleMirrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#synchronizeSingleMirrors.");
            const operationName = "synchronizeSingleMirrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": synchronizeSingleMirrorsRequest.managementStationId,
                "{mirrorId}": synchronizeSingleMirrorsRequest.mirrorId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": synchronizeSingleMirrorsRequest.ifMatch,
                "opc-request-id": synchronizeSingleMirrorsRequest.opcRequestId,
                "opc-retry-token": synchronizeSingleMirrorsRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, synchronizeSingleMirrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}/mirrors/{mirrorId}/actions/synchronize",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the configuration of the specified management station.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateManagementStationRequest
     * @return UpdateManagementStationResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateManagementStation.ts.html |here} to see how to use UpdateManagementStation API.
     */
    updateManagementStation(updateManagementStationRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ManagementStationClient#updateManagementStation.");
            const operationName = "updateManagementStation";
            const apiReferenceLink = "";
            const pathParams = {
                "{managementStationId}": updateManagementStationRequest.managementStationId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateManagementStationRequest.ifMatch,
                "opc-request-id": updateManagementStationRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateManagementStationRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managementStations/{managementStationId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateManagementStationRequest.updateManagementStationDetails, "UpdateManagementStationDetails", model.UpdateManagementStationDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managementStation",
                    bodyModel: model.ManagementStation,
                    type: "model.ManagementStation",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ManagementStationClient = ManagementStationClient;
ManagementStationClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
ManagementStationClient.endpointServiceName = "";
var OnboardingApiKeys;
(function (OnboardingApiKeys) {
})(OnboardingApiKeys = exports.OnboardingApiKeys || (exports.OnboardingApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class OnboardingClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "Onboarding";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`OnboardingClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OnboardingClient.serviceEndpointTemplate, this._region, OnboardingClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OnboardingClient.serviceEndpointTemplate, this._regionId, OnboardingClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(OnboardingClient.serviceEndpointTemplate, region, OnboardingClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(OnboardingClient.serviceEndpointTemplate, regionId, OnboardingClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new OnboardingWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new onboarding_waiter_1.OnboardingWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Creates a registration profile.
     * A profile is a supplementary file for the OS Management Hub agentry
     * that dictates the content for a managed instance at registration time.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateProfileRequest
     * @return CreateProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateProfile.ts.html |here} to see how to use CreateProfile API.
     */
    createProfile(createProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OnboardingClient#createProfile.");
            const operationName = "createProfile";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createProfileRequest.opcRetryToken,
                "opc-request-id": createProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/profiles",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createProfileRequest.createProfileDetails, "CreateProfileDetails", model.CreateProfileDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "profile",
                    bodyModel: model.Profile,
                    type: "model.Profile",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes a specified registration profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteProfileRequest
     * @return DeleteProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteProfile.ts.html |here} to see how to use DeleteProfile API.
     */
    deleteProfile(deleteProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OnboardingClient#deleteProfile.");
            const operationName = "deleteProfile";
            const apiReferenceLink = "";
            const pathParams = {
                "{profileId}": deleteProfileRequest.profileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteProfileRequest.ifMatch,
                "opc-request-id": deleteProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/profiles/{profileId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified registration profile.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetProfileRequest
     * @return GetProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetProfile.ts.html |here} to see how to use GetProfile API.
     */
    getProfile(getProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OnboardingClient#getProfile.");
            const operationName = "getProfile";
            const apiReferenceLink = "";
            const pathParams = {
                "{profileId}": getProfileRequest.profileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/profiles/{profileId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "profile",
                    bodyModel: model.Profile,
                    type: "model.Profile",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists registration profiles that match the specified compartment or profile OCID. Filter the list against a
     * variety of criteria including but not limited to its name, status, vendor name, and architecture type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListProfilesRequest
     * @return ListProfilesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListProfiles.ts.html |here} to see how to use ListProfiles API.
     */
    listProfiles(listProfilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OnboardingClient#listProfiles.");
            const operationName = "listProfiles";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listProfilesRequest.compartmentId,
                "displayName": listProfilesRequest.displayName,
                "displayNameContains": listProfilesRequest.displayNameContains,
                "profileType": listProfilesRequest.profileType,
                "profileId": listProfilesRequest.profileId,
                "osFamily": listProfilesRequest.osFamily,
                "archType": listProfilesRequest.archType,
                "vendorName": listProfilesRequest.vendorName,
                "limit": listProfilesRequest.limit,
                "page": listProfilesRequest.page,
                "lifecycleState": listProfilesRequest.lifecycleState,
                "sortOrder": listProfilesRequest.sortOrder,
                "sortBy": listProfilesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listProfilesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listProfilesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/profiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "profileCollection",
                    bodyModel: model.ProfileCollection,
                    type: "model.ProfileCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified profile's name, description, and tags.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateProfileRequest
     * @return UpdateProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateProfile.ts.html |here} to see how to use UpdateProfile API.
     */
    updateProfile(updateProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation OnboardingClient#updateProfile.");
            const operationName = "updateProfile";
            const apiReferenceLink = "";
            const pathParams = {
                "{profileId}": updateProfileRequest.profileId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateProfileRequest.ifMatch,
                "opc-request-id": updateProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/profiles/{profileId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateProfileRequest.updateProfileDetails, "UpdateProfileDetails", model.UpdateProfileDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "profile",
                    bodyModel: model.Profile,
                    type: "model.Profile",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.OnboardingClient = OnboardingClient;
OnboardingClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
OnboardingClient.endpointServiceName = "";
var ReportingManagedInstanceApiKeys;
(function (ReportingManagedInstanceApiKeys) {
})(ReportingManagedInstanceApiKeys = exports.ReportingManagedInstanceApiKeys || (exports.ReportingManagedInstanceApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ReportingManagedInstanceClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ReportingManagedInstance";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`ReportingManagedInstanceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ReportingManagedInstanceClient.serviceEndpointTemplate, this._region, ReportingManagedInstanceClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ReportingManagedInstanceClient.serviceEndpointTemplate, this._regionId, ReportingManagedInstanceClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ReportingManagedInstanceClient.serviceEndpointTemplate, region, ReportingManagedInstanceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ReportingManagedInstanceClient.serviceEndpointTemplate, regionId, ReportingManagedInstanceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Returns a CSV format report of managed instances matching the given filters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetManagedInstanceAnalyticContentRequest
     * @return GetManagedInstanceAnalyticContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetManagedInstanceAnalyticContent.ts.html |here} to see how to use GetManagedInstanceAnalyticContent API.
     */
    getManagedInstanceAnalyticContent(getManagedInstanceAnalyticContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ReportingManagedInstanceClient#getManagedInstanceAnalyticContent.");
            const operationName = "getManagedInstanceAnalyticContent";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": getManagedInstanceAnalyticContentRequest.compartmentId,
                "managedInstanceGroupId": getManagedInstanceAnalyticContentRequest.managedInstanceGroupId,
                "lifecycleEnvironmentId": getManagedInstanceAnalyticContentRequest.lifecycleEnvironmentId,
                "lifecycleStageId": getManagedInstanceAnalyticContentRequest.lifecycleStageId,
                "status": getManagedInstanceAnalyticContentRequest.status,
                "displayName": getManagedInstanceAnalyticContentRequest.displayName,
                "displayNameContains": getManagedInstanceAnalyticContentRequest.displayNameContains,
                "instanceLocation": getManagedInstanceAnalyticContentRequest.instanceLocation,
                "securityUpdatesAvailableEqualsTo": getManagedInstanceAnalyticContentRequest.securityUpdatesAvailableEqualsTo,
                "bugUpdatesAvailableEqualsTo": getManagedInstanceAnalyticContentRequest.bugUpdatesAvailableEqualsTo,
                "securityUpdatesAvailableGreaterThan": getManagedInstanceAnalyticContentRequest.securityUpdatesAvailableGreaterThan,
                "bugUpdatesAvailableGreaterThan": getManagedInstanceAnalyticContentRequest.bugUpdatesAvailableGreaterThan
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceAnalyticContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceAnalyticContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceAnalytics/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a CSV format report of a single managed instance whose associated Erratas match the given filters.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetManagedInstanceContentRequest
     * @return GetManagedInstanceContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetManagedInstanceContent.ts.html |here} to see how to use GetManagedInstanceContent API.
     */
    getManagedInstanceContent(getManagedInstanceContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ReportingManagedInstanceClient#getManagedInstanceContent.");
            const operationName = "getManagedInstanceContent";
            const apiReferenceLink = "";
            const pathParams = {
                "{managedInstanceId}": getManagedInstanceContentRequest.managedInstanceId
            };
            const queryParams = {
                "advisoryName": getManagedInstanceContentRequest.advisoryName,
                "advisoryNameContains": getManagedInstanceContentRequest.advisoryNameContains,
                "advisoryType": getManagedInstanceContentRequest.advisoryType
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getManagedInstanceContentRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getManagedInstanceContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstances/{managedInstanceId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns a list of user specified metrics for a collection of managed instances.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SummarizeManagedInstanceAnalyticsRequest
     * @return SummarizeManagedInstanceAnalyticsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SummarizeManagedInstanceAnalytics.ts.html |here} to see how to use SummarizeManagedInstanceAnalytics API.
     */
    summarizeManagedInstanceAnalytics(summarizeManagedInstanceAnalyticsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ReportingManagedInstanceClient#summarizeManagedInstanceAnalytics.");
            const operationName = "summarizeManagedInstanceAnalytics";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "metricNames": summarizeManagedInstanceAnalyticsRequest.metricNames,
                "compartmentId": summarizeManagedInstanceAnalyticsRequest.compartmentId,
                "managedInstanceGroupId": summarizeManagedInstanceAnalyticsRequest.managedInstanceGroupId,
                "lifecycleEnvironmentId": summarizeManagedInstanceAnalyticsRequest.lifecycleEnvironmentId,
                "lifecycleStageId": summarizeManagedInstanceAnalyticsRequest.lifecycleStageId,
                "status": summarizeManagedInstanceAnalyticsRequest.status,
                "displayName": summarizeManagedInstanceAnalyticsRequest.displayName,
                "displayNameContains": summarizeManagedInstanceAnalyticsRequest.displayNameContains,
                "instanceLocation": summarizeManagedInstanceAnalyticsRequest.instanceLocation,
                "limit": summarizeManagedInstanceAnalyticsRequest.limit,
                "page": summarizeManagedInstanceAnalyticsRequest.page,
                "sortBy": summarizeManagedInstanceAnalyticsRequest.sortBy,
                "sortOrder": summarizeManagedInstanceAnalyticsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": summarizeManagedInstanceAnalyticsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, summarizeManagedInstanceAnalyticsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/managedInstanceAnalytics",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "managedInstanceAnalyticCollection",
                    bodyModel: model.ManagedInstanceAnalyticCollection,
                    type: "model.ManagedInstanceAnalyticCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ReportingManagedInstanceClient = ReportingManagedInstanceClient;
ReportingManagedInstanceClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
ReportingManagedInstanceClient.endpointServiceName = "";
var ScheduledJobApiKeys;
(function (ScheduledJobApiKeys) {
})(ScheduledJobApiKeys = exports.ScheduledJobApiKeys || (exports.ScheduledJobApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class ScheduledJobClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "ScheduledJob";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`ScheduledJobClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ScheduledJobClient.serviceEndpointTemplate, this._region, ScheduledJobClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ScheduledJobClient.serviceEndpointTemplate, this._regionId, ScheduledJobClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(ScheduledJobClient.serviceEndpointTemplate, region, ScheduledJobClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(ScheduledJobClient.serviceEndpointTemplate, regionId, ScheduledJobClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new ScheduledJobWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new scheduledjob_waiter_1.ScheduledJobWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Creates a new scheduled job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateScheduledJobRequest
     * @return CreateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateScheduledJob.ts.html |here} to see how to use CreateScheduledJob API.
     */
    createScheduledJob(createScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#createScheduledJob.");
            const operationName = "createScheduledJob";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createScheduledJobRequest.opcRetryToken,
                "opc-request-id": createScheduledJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createScheduledJobRequest.createScheduledJobDetails, "CreateScheduledJobDetails", model.CreateScheduledJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("Location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified scheduled job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteScheduledJobRequest
     * @return DeleteScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteScheduledJob.ts.html |here} to see how to use DeleteScheduledJob API.
     */
    deleteScheduledJob(deleteScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#deleteScheduledJob.");
            const operationName = "deleteScheduledJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{scheduledJobId}": deleteScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteScheduledJobRequest.ifMatch,
                "opc-request-id": deleteScheduledJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified scheduled job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetScheduledJobRequest
     * @return GetScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetScheduledJob.ts.html |here} to see how to use GetScheduledJob API.
     */
    getScheduledJob(getScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#getScheduledJob.");
            const operationName = "getScheduledJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{scheduledJobId}": getScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getScheduledJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists scheduled jobs that match the specified compartment or scheduled job OCID.
     * Filter the list against a variety of criteria including but not limited to its display name,
     * lifecycle state, operation type, and schedule type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListScheduledJobsRequest
     * @return ListScheduledJobsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListScheduledJobs.ts.html |here} to see how to use ListScheduledJobs API.
     */
    listScheduledJobs(listScheduledJobsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#listScheduledJobs.");
            const operationName = "listScheduledJobs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listScheduledJobsRequest.compartmentId,
                "displayName": listScheduledJobsRequest.displayName,
                "displayNameContains": listScheduledJobsRequest.displayNameContains,
                "lifecycleState": listScheduledJobsRequest.lifecycleState,
                "managedInstanceId": listScheduledJobsRequest.managedInstanceId,
                "managedInstanceGroupId": listScheduledJobsRequest.managedInstanceGroupId,
                "managedCompartmentId": listScheduledJobsRequest.managedCompartmentId,
                "lifecycleStageId": listScheduledJobsRequest.lifecycleStageId,
                "operationType": listScheduledJobsRequest.operationType,
                "scheduleType": listScheduledJobsRequest.scheduleType,
                "timeStart": listScheduledJobsRequest.timeStart,
                "timeEnd": listScheduledJobsRequest.timeEnd,
                "limit": listScheduledJobsRequest.limit,
                "page": listScheduledJobsRequest.page,
                "sortOrder": listScheduledJobsRequest.sortOrder,
                "sortBy": listScheduledJobsRequest.sortBy,
                "isRestricted": listScheduledJobsRequest.isRestricted,
                "id": listScheduledJobsRequest.id,
                "compartmentIdInSubtree": listScheduledJobsRequest.compartmentIdInSubtree
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listScheduledJobsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listScheduledJobsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJobCollection",
                    bodyModel: model.ScheduledJobCollection,
                    type: "model.ScheduledJobCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Triggers an already created RECURRING scheduled job to run immediately instead of waiting
     * for its next regularly scheduled time. This operation does not support ONETIME scheduled job.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param RunScheduledJobNowRequest
     * @return RunScheduledJobNowResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/RunScheduledJobNow.ts.html |here} to see how to use RunScheduledJobNow API.
     */
    runScheduledJobNow(runScheduledJobNowRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#runScheduledJobNow.");
            const operationName = "runScheduledJobNow";
            const apiReferenceLink = "";
            const pathParams = {
                "{scheduledJobId}": runScheduledJobNowRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": runScheduledJobNowRequest.opcRequestId,
                "if-match": runScheduledJobNowRequest.ifMatch,
                "opc-retry-token": runScheduledJobNowRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, runScheduledJobNowRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}/actions/runNow",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified scheduled job's name, description, and other details, such as next execution and recurrence.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateScheduledJobRequest
     * @return UpdateScheduledJobResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateScheduledJob.ts.html |here} to see how to use UpdateScheduledJob API.
     */
    updateScheduledJob(updateScheduledJobRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation ScheduledJobClient#updateScheduledJob.");
            const operationName = "updateScheduledJob";
            const apiReferenceLink = "";
            const pathParams = {
                "{scheduledJobId}": updateScheduledJobRequest.scheduledJobId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateScheduledJobRequest.ifMatch,
                "opc-request-id": updateScheduledJobRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateScheduledJobRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/scheduledJobs/{scheduledJobId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateScheduledJobRequest.updateScheduledJobDetails, "UpdateScheduledJobDetails", model.UpdateScheduledJobDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "scheduledJob",
                    bodyModel: model.ScheduledJob,
                    type: "model.ScheduledJob",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.ScheduledJobClient = ScheduledJobClient;
ScheduledJobClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
ScheduledJobClient.endpointServiceName = "";
var SoftwareSourceApiKeys;
(function (SoftwareSourceApiKeys) {
})(SoftwareSourceApiKeys = exports.SoftwareSourceApiKeys || (exports.SoftwareSourceApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class SoftwareSourceClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "SoftwareSource";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`SoftwareSourceClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SoftwareSourceClient.serviceEndpointTemplate, this._region, SoftwareSourceClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SoftwareSourceClient.serviceEndpointTemplate, this._regionId, SoftwareSourceClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(SoftwareSourceClient.serviceEndpointTemplate, region, SoftwareSourceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(SoftwareSourceClient.serviceEndpointTemplate, regionId, SoftwareSourceClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new SoftwareSourceWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new softwaresource_waiter_1.SoftwareSourceWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Updates the availability for a list of specified software sources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ChangeAvailabilityOfSoftwareSourcesRequest
     * @return ChangeAvailabilityOfSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ChangeAvailabilityOfSoftwareSources.ts.html |here} to see how to use ChangeAvailabilityOfSoftwareSources API.
     */
    changeAvailabilityOfSoftwareSources(changeAvailabilityOfSoftwareSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#changeAvailabilityOfSoftwareSources.");
            const operationName = "changeAvailabilityOfSoftwareSources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": changeAvailabilityOfSoftwareSourcesRequest.opcRequestId,
                "opc-retry-token": changeAvailabilityOfSoftwareSourcesRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, changeAvailabilityOfSoftwareSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/actions/changeAvailability",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(changeAvailabilityOfSoftwareSourcesRequest.changeAvailabilityOfSoftwareSourcesDetails, "ChangeAvailabilityOfSoftwareSourcesDetails", model.ChangeAvailabilityOfSoftwareSourcesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Registers the necessary entitlement credentials for OS vendor software sources.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateEntitlementRequest
     * @return CreateEntitlementResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateEntitlement.ts.html |here} to see how to use CreateEntitlement API.
     */
    createEntitlement(createEntitlementRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#createEntitlement.");
            const operationName = "createEntitlement";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createEntitlementRequest.opcRequestId,
                "opc-retry-token": createEntitlementRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createEntitlementRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/entitlements",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createEntitlementRequest.createEntitlementDetails, "CreateEntitlementDetails", model.CreateEntitlementDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Creates a new versioned or custom software source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateSoftwareSourceRequest
     * @return CreateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/CreateSoftwareSource.ts.html |here} to see how to use CreateSoftwareSource API.
     */
    createSoftwareSource(createSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#createSoftwareSource.");
            const operationName = "createSoftwareSource";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": createSoftwareSourceRequest.opcRequestId,
                "opc-retry-token": createSoftwareSourceRequest.opcRetryToken
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createSoftwareSourceRequest.createSoftwareSourceDetails, "CreateSoftwareSourceDetails", model.CreateSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("location"),
                            key: "location",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the specified software source.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteSoftwareSourceRequest
     * @return DeleteSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/DeleteSoftwareSource.ts.html |here} to see how to use DeleteSoftwareSource API.
     */
    deleteSoftwareSource(deleteSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#deleteSoftwareSource.");
            const operationName = "deleteSoftwareSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": deleteSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": deleteSoftwareSourceRequest.opcRequestId,
                "if-match": deleteSoftwareSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified erratum by its advisory name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetErratumRequest
     * @return GetErratumResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetErratum.ts.html |here} to see how to use GetErratum API.
     */
    getErratum(getErratumRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getErratum.");
            const operationName = "getErratum";
            const apiReferenceLink = "";
            const pathParams = {
                "{name}": getErratumRequest.name
            };
            const queryParams = {
                "compartmentId": getErratumRequest.compartmentId
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getErratumRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getErratumRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/errata/{name}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "erratum",
                    bodyModel: model.Erratum,
                    type: "model.Erratum",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified module stream in a software source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModuleStreamRequest
     * @return GetModuleStreamResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetModuleStream.ts.html |here} to see how to use GetModuleStream API.
     */
    getModuleStream(getModuleStreamRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getModuleStream.");
            const operationName = "getModuleStream";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": getModuleStreamRequest.softwareSourceId,
                "{moduleName}": getModuleStreamRequest.moduleName
            };
            const queryParams = {
                "streamName": getModuleStreamRequest.streamName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModuleStreamRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModuleStreamRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/moduleStreams/{moduleName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStream",
                    bodyModel: model.ModuleStream,
                    type: "model.ModuleStream",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified module stream profile in a software source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetModuleStreamProfileRequest
     * @return GetModuleStreamProfileResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetModuleStreamProfile.ts.html |here} to see how to use GetModuleStreamProfile API.
     */
    getModuleStreamProfile(getModuleStreamProfileRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getModuleStreamProfile.");
            const operationName = "getModuleStreamProfile";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": getModuleStreamProfileRequest.softwareSourceId,
                "{profileName}": getModuleStreamProfileRequest.profileName
            };
            const queryParams = {
                "moduleName": getModuleStreamProfileRequest.moduleName,
                "streamName": getModuleStreamProfileRequest.streamName
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getModuleStreamProfileRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getModuleStreamProfileRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/moduleStreamProfiles/{profileName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStreamProfile",
                    bodyModel: model.ModuleStreamProfile,
                    type: "model.ModuleStreamProfile",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified package group from a software source.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetPackageGroupRequest
     * @return GetPackageGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetPackageGroup.ts.html |here} to see how to use GetPackageGroup API.
     */
    getPackageGroup(getPackageGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getPackageGroup.");
            const operationName = "getPackageGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": getPackageGroupRequest.softwareSourceId,
                "{packageGroupId}": getPackageGroupRequest.packageGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getPackageGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getPackageGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/packageGroups/{packageGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "packageGroup",
                    bodyModel: model.PackageGroup,
                    type: "model.PackageGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified software package.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSoftwarePackageRequest
     * @return GetSoftwarePackageResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetSoftwarePackage.ts.html |here} to see how to use GetSoftwarePackage API.
     */
    getSoftwarePackage(getSoftwarePackageRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getSoftwarePackage.");
            const operationName = "getSoftwarePackage";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": getSoftwarePackageRequest.softwareSourceId,
                "{softwarePackageName}": getSoftwarePackageRequest.softwarePackageName
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSoftwarePackageRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSoftwarePackageRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/softwarePackages/{softwarePackageName}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwarePackage",
                    bodyModel: model.SoftwarePackage,
                    type: "model.SoftwarePackage",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified software source.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetSoftwareSourceRequest
     * @return GetSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetSoftwareSource.ts.html |here} to see how to use GetSoftwareSource API.
     */
    getSoftwareSource(getSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#getSoftwareSource.");
            const operationName = "getSoftwareSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": getSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getSoftwareSourceRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists entitlements in the specified tenancy OCID. Filter the list against a variety of criteria including but
     * not limited to its CSI, and vendor name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListEntitlementsRequest
     * @return ListEntitlementsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListEntitlements.ts.html |here} to see how to use ListEntitlements API.
     */
    listEntitlements(listEntitlementsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listEntitlements.");
            const operationName = "listEntitlements";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listEntitlementsRequest.compartmentId,
                "csi": listEntitlementsRequest.csi,
                "vendorName": listEntitlementsRequest.vendorName,
                "limit": listEntitlementsRequest.limit,
                "page": listEntitlementsRequest.page,
                "sortOrder": listEntitlementsRequest.sortOrder,
                "sortBy": listEntitlementsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listEntitlementsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listEntitlementsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/entitlements",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "entitlementCollection",
                    bodyModel: model.EntitlementCollection,
                    type: "model.EntitlementCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all of the currently available errata. Filter the list against a variety of criteria including but not
     * limited to its name, classification type, advisory severity, and OS family.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListErrataRequest
     * @return ListErrataResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListErrata.ts.html |here} to see how to use ListErrata API.
     */
    listErrata(listErrataRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listErrata.");
            const operationName = "listErrata";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listErrataRequest.compartmentId,
                "name": listErrataRequest.name,
                "nameContains": listErrataRequest.nameContains,
                "classificationType": listErrataRequest.classificationType,
                "osFamily": listErrataRequest.osFamily,
                "advisorySeverity": listErrataRequest.advisorySeverity,
                "timeIssueDateStart": listErrataRequest.timeIssueDateStart,
                "timeIssueDateEnd": listErrataRequest.timeIssueDateEnd,
                "limit": listErrataRequest.limit,
                "page": listErrataRequest.page,
                "sortOrder": listErrataRequest.sortOrder,
                "sortBy": listErrataRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listErrataRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listErrataRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/errata",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "erratumCollection",
                    bodyModel: model.ErratumCollection,
                    type: "model.ErratumCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists module stream profiles from the specified software source OCID. Filter the list against a variety of
     * criteria including but not limited to its module name, stream name, and (profile) name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModuleStreamProfilesRequest
     * @return ListModuleStreamProfilesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListModuleStreamProfiles.ts.html |here} to see how to use ListModuleStreamProfiles API.
     */
    listModuleStreamProfiles(listModuleStreamProfilesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listModuleStreamProfiles.");
            const operationName = "listModuleStreamProfiles";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": listModuleStreamProfilesRequest.softwareSourceId
            };
            const queryParams = {
                "moduleName": listModuleStreamProfilesRequest.moduleName,
                "streamName": listModuleStreamProfilesRequest.streamName,
                "name": listModuleStreamProfilesRequest.name,
                "limit": listModuleStreamProfilesRequest.limit,
                "page": listModuleStreamProfilesRequest.page,
                "sortOrder": listModuleStreamProfilesRequest.sortOrder,
                "sortBy": listModuleStreamProfilesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamProfilesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamProfilesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/moduleStreamProfiles",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStreamProfileCollection",
                    bodyModel: model.ModuleStreamProfileCollection,
                    type: "model.ModuleStreamProfileCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists module streams from the specified software source OCID. Filter the list against a variety of
     * criteria including but not limited to its module name and (stream) name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListModuleStreamsRequest
     * @return ListModuleStreamsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListModuleStreams.ts.html |here} to see how to use ListModuleStreams API.
     */
    listModuleStreams(listModuleStreamsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listModuleStreams.");
            const operationName = "listModuleStreams";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": listModuleStreamsRequest.softwareSourceId
            };
            const queryParams = {
                "moduleName": listModuleStreamsRequest.moduleName,
                "name": listModuleStreamsRequest.name,
                "isLatest": listModuleStreamsRequest.isLatest,
                "limit": listModuleStreamsRequest.limit,
                "page": listModuleStreamsRequest.page,
                "sortOrder": listModuleStreamsRequest.sortOrder,
                "sortBy": listModuleStreamsRequest.sortBy,
                "moduleNameContains": listModuleStreamsRequest.moduleNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listModuleStreamsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listModuleStreamsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/moduleStreams",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStreamCollection",
                    bodyModel: model.ModuleStreamCollection,
                    type: "model.ModuleStreamCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists package groups that associate with the specified software source OCID. Filter the list against a
     * variety of criteria including but not limited to its name, and package group type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListPackageGroupsRequest
     * @return ListPackageGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListPackageGroups.ts.html |here} to see how to use ListPackageGroups API.
     */
    listPackageGroups(listPackageGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listPackageGroups.");
            const operationName = "listPackageGroups";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": listPackageGroupsRequest.softwareSourceId
            };
            const queryParams = {
                "compartmentId": listPackageGroupsRequest.compartmentId,
                "name": listPackageGroupsRequest.name,
                "nameContains": listPackageGroupsRequest.nameContains,
                "groupType": listPackageGroupsRequest.groupType,
                "limit": listPackageGroupsRequest.limit,
                "page": listPackageGroupsRequest.page,
                "sortOrder": listPackageGroupsRequest.sortOrder,
                "sortBy": listPackageGroupsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listPackageGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listPackageGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/packageGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "packageGroupCollection",
                    bodyModel: model.PackageGroupCollection,
                    type: "model.PackageGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists software packages in the specified software source.  Filter the list against a variety of criteria
     * including but not limited to its name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSoftwarePackagesRequest
     * @return ListSoftwarePackagesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListSoftwarePackages.ts.html |here} to see how to use ListSoftwarePackages API.
     */
    listSoftwarePackages(listSoftwarePackagesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listSoftwarePackages.");
            const operationName = "listSoftwarePackages";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": listSoftwarePackagesRequest.softwareSourceId
            };
            const queryParams = {
                "displayName": listSoftwarePackagesRequest.displayName,
                "displayNameContains": listSoftwarePackagesRequest.displayNameContains,
                "isLatest": listSoftwarePackagesRequest.isLatest,
                "limit": listSoftwarePackagesRequest.limit,
                "page": listSoftwarePackagesRequest.page,
                "sortOrder": listSoftwarePackagesRequest.sortOrder,
                "sortBy": listSoftwarePackagesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSoftwarePackagesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSoftwarePackagesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}/softwarePackages",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwarePackageCollection",
                    bodyModel: model.SoftwarePackageCollection,
                    type: "model.SoftwarePackageCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists available software source vendors. Filter the list against a variety of criteria including but not limited
     * to its name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSoftwareSourceVendorsRequest
     * @return ListSoftwareSourceVendorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListSoftwareSourceVendors.ts.html |here} to see how to use ListSoftwareSourceVendors API.
     */
    listSoftwareSourceVendors(listSoftwareSourceVendorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listSoftwareSourceVendors.");
            const operationName = "listSoftwareSourceVendors";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSoftwareSourceVendorsRequest.compartmentId,
                "sortOrder": listSoftwareSourceVendorsRequest.sortOrder,
                "sortBy": listSoftwareSourceVendorsRequest.sortBy,
                "name": listSoftwareSourceVendorsRequest.name
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSoftwareSourceVendorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSoftwareSourceVendorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSourceVendors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSourceVendorCollection",
                    bodyModel: model.SoftwareSourceVendorCollection,
                    type: "model.SoftwareSourceVendorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists software sources that match the specified tenancy or software source OCID. Filter the list against a
     * variety of criteria including but not limited to its name, status, architecture, and OS family.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListSoftwareSourcesRequest
     * @return ListSoftwareSourcesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListSoftwareSources.ts.html |here} to see how to use ListSoftwareSources API.
     */
    listSoftwareSources(listSoftwareSourcesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#listSoftwareSources.");
            const operationName = "listSoftwareSources";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listSoftwareSourcesRequest.compartmentId,
                "softwareSourceId": listSoftwareSourcesRequest.softwareSourceId,
                "softwareSourceType": listSoftwareSourcesRequest.softwareSourceType,
                "vendorName": listSoftwareSourcesRequest.vendorName,
                "osFamily": listSoftwareSourcesRequest.osFamily,
                "archType": listSoftwareSourcesRequest.archType,
                "availability": listSoftwareSourcesRequest.availability,
                "displayName": listSoftwareSourcesRequest.displayName,
                "displayNameContains": listSoftwareSourcesRequest.displayNameContains,
                "displayNameNotEqualTo": listSoftwareSourcesRequest.displayNameNotEqualTo,
                "limit": listSoftwareSourcesRequest.limit,
                "page": listSoftwareSourcesRequest.page,
                "sortOrder": listSoftwareSourcesRequest.sortOrder,
                "sortBy": listSoftwareSourcesRequest.sortBy,
                "lifecycleState": listSoftwareSourcesRequest.lifecycleState
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listSoftwareSourcesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listSoftwareSourcesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSourceCollection",
                    bodyModel: model.SoftwareSourceCollection,
                    type: "model.SoftwareSourceCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists modules from a list of software sources. Filter the list against a variety of
     * criteria including the module name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchSoftwareSourceModuleStreamsRequest
     * @return SearchSoftwareSourceModuleStreamsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SearchSoftwareSourceModuleStreams.ts.html |here} to see how to use SearchSoftwareSourceModuleStreams API.
     */
    searchSoftwareSourceModuleStreams(searchSoftwareSourceModuleStreamsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#searchSoftwareSourceModuleStreams.");
            const operationName = "searchSoftwareSourceModuleStreams";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "limit": searchSoftwareSourceModuleStreamsRequest.limit,
                "page": searchSoftwareSourceModuleStreamsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": searchSoftwareSourceModuleStreamsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchSoftwareSourceModuleStreamsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSourceModuleStreams/actions/search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchSoftwareSourceModuleStreamsRequest.searchSoftwareSourceModuleStreamsDetails, "SearchSoftwareSourceModuleStreamsDetails", model.SearchSoftwareSourceModuleStreamsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleStreamCollection",
                    bodyModel: model.ModuleStreamCollection,
                    type: "model.ModuleStreamCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists modules from a list of software sources. Filter the list against a variety of
     * criteria including the (module) name.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchSoftwareSourceModulesRequest
     * @return SearchSoftwareSourceModulesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SearchSoftwareSourceModules.ts.html |here} to see how to use SearchSoftwareSourceModules API.
     */
    searchSoftwareSourceModules(searchSoftwareSourceModulesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#searchSoftwareSourceModules.");
            const operationName = "searchSoftwareSourceModules";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "limit": searchSoftwareSourceModulesRequest.limit,
                "page": searchSoftwareSourceModulesRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": searchSoftwareSourceModulesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchSoftwareSourceModulesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSourceModules/actions/search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchSoftwareSourceModulesRequest.searchSoftwareSourceModulesDetails, "SearchSoftwareSourceModulesDetails", model.SearchSoftwareSourceModulesDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "moduleCollection",
                    bodyModel: model.ModuleCollection,
                    type: "model.ModuleCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Searches the package groups from the specified list of software sources. Filter the list against a variety of criteria
     * including but not limited to its name, and group type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param SearchSoftwareSourcePackageGroupsRequest
     * @return SearchSoftwareSourcePackageGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/SearchSoftwareSourcePackageGroups.ts.html |here} to see how to use SearchSoftwareSourcePackageGroups API.
     */
    searchSoftwareSourcePackageGroups(searchSoftwareSourcePackageGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#searchSoftwareSourcePackageGroups.");
            const operationName = "searchSoftwareSourcePackageGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "limit": searchSoftwareSourcePackageGroupsRequest.limit,
                "page": searchSoftwareSourcePackageGroupsRequest.page
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": searchSoftwareSourcePackageGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, searchSoftwareSourcePackageGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSourcePackageGroups/actions/search",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(searchSoftwareSourcePackageGroupsRequest.searchSoftwareSourcePackageGroupsDetails, "SearchSoftwareSourcePackageGroupsDetails", model.SearchSoftwareSourcePackageGroupsDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "packageGroupCollection",
                    bodyModel: model.PackageGroupCollection,
                    type: "model.PackageGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the specified software source's details, including but not limited to name, description, and tags.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateSoftwareSourceRequest
     * @return UpdateSoftwareSourceResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/UpdateSoftwareSource.ts.html |here} to see how to use UpdateSoftwareSource API.
     */
    updateSoftwareSource(updateSoftwareSourceRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation SoftwareSourceClient#updateSoftwareSource.");
            const operationName = "updateSoftwareSource";
            const apiReferenceLink = "";
            const pathParams = {
                "{softwareSourceId}": updateSoftwareSourceRequest.softwareSourceId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": updateSoftwareSourceRequest.opcRequestId,
                "if-match": updateSoftwareSourceRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateSoftwareSourceRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/softwareSources/{softwareSourceId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateSoftwareSourceRequest.updateSoftwareSourceDetails, "UpdateSoftwareSourceDetails", model.UpdateSoftwareSourceDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "softwareSource",
                    bodyModel: model.SoftwareSource,
                    type: "model.SoftwareSource",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-work-request-id"),
                            key: "opcWorkRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.SoftwareSourceClient = SoftwareSourceClient;
SoftwareSourceClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
SoftwareSourceClient.endpointServiceName = "";
var WorkRequestApiKeys;
(function (WorkRequestApiKeys) {
})(WorkRequestApiKeys = exports.WorkRequestApiKeys || (exports.WorkRequestApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class WorkRequestClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "WorkRequest";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("osmanagementhub")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("osmanagementhub");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20220901";
        if (this.logger)
            this.logger.info(`WorkRequestClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(WorkRequestClient.serviceEndpointTemplate, this._region, WorkRequestClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(WorkRequestClient.serviceEndpointTemplate, this._regionId, WorkRequestClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(WorkRequestClient.serviceEndpointTemplate, region, WorkRequestClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(WorkRequestClient.serviceEndpointTemplate, regionId, WorkRequestClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new WorkRequestWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new workrequest_waiter_1.WorkRequestWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Gets information about the specified work request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetWorkRequestRequest
     * @return GetWorkRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/GetWorkRequest.ts.html |here} to see how to use GetWorkRequest API.
     */
    getWorkRequest(getWorkRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestClient#getWorkRequest.");
            const operationName = "getWorkRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": getWorkRequestRequest.workRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getWorkRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getWorkRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequest",
                    bodyModel: model.WorkRequest,
                    type: "model.WorkRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the errors for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestErrorsRequest
     * @return ListWorkRequestErrorsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListWorkRequestErrors.ts.html |here} to see how to use ListWorkRequestErrors API.
     */
    listWorkRequestErrors(listWorkRequestErrorsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestClient#listWorkRequestErrors.");
            const operationName = "listWorkRequestErrors";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestErrorsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestErrorsRequest.page,
                "limit": listWorkRequestErrorsRequest.limit,
                "sortBy": listWorkRequestErrorsRequest.sortBy,
                "sortOrder": listWorkRequestErrorsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestErrorsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestErrorsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/errors",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestErrorCollection",
                    bodyModel: model.WorkRequestErrorCollection,
                    type: "model.WorkRequestErrorCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets the logs for the specified work request.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestLogsRequest
     * @return ListWorkRequestLogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListWorkRequestLogs.ts.html |here} to see how to use ListWorkRequestLogs API.
     */
    listWorkRequestLogs(listWorkRequestLogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestClient#listWorkRequestLogs.");
            const operationName = "listWorkRequestLogs";
            const apiReferenceLink = "";
            const pathParams = {
                "{workRequestId}": listWorkRequestLogsRequest.workRequestId
            };
            const queryParams = {
                "page": listWorkRequestLogsRequest.page,
                "limit": listWorkRequestLogsRequest.limit,
                "sortBy": listWorkRequestLogsRequest.sortBy,
                "sortOrder": listWorkRequestLogsRequest.sortOrder
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestLogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestLogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests/{workRequestId}/logs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestLogEntryCollection",
                    bodyModel: model.WorkRequestLogEntryCollection,
                    type: "model.WorkRequestLogEntryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists work requests that match the specified compartment or work request OCID. Filter the list against
     * a variety of criteria including but not limited to its name, status, and operation type.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListWorkRequestsRequest
     * @return ListWorkRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/osmanagementhub/ListWorkRequests.ts.html |here} to see how to use ListWorkRequests API.
     */
    listWorkRequests(listWorkRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation WorkRequestClient#listWorkRequests.");
            const operationName = "listWorkRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listWorkRequestsRequest.compartmentId,
                "workRequestId": listWorkRequestsRequest.workRequestId,
                "status": listWorkRequestsRequest.status,
                "resourceId": listWorkRequestsRequest.resourceId,
                "page": listWorkRequestsRequest.page,
                "limit": listWorkRequestsRequest.limit,
                "sortOrder": listWorkRequestsRequest.sortOrder,
                "sortBy": listWorkRequestsRequest.sortBy,
                "initiatorId": listWorkRequestsRequest.initiatorId,
                "parentId": listWorkRequestsRequest.parentId,
                "parentResourcesNotEqualTo": listWorkRequestsRequest.parentResourcesNotEqualTo,
                "operationType": listWorkRequestsRequest.operationType,
                "displayNameContains": listWorkRequestsRequest.displayNameContains
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listWorkRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listWorkRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/workRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "workRequestSummaryCollection",
                    bodyModel: model.WorkRequestSummaryCollection,
                    type: "model.WorkRequestSummaryCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.WorkRequestClient = WorkRequestClient;
WorkRequestClient.serviceEndpointTemplate = "https://osmh.{region}.oci.{secondLevelDomain}";
WorkRequestClient.endpointServiceName = "";
//# sourceMappingURL=client.js.map