/**
 * Stack Monitoring API
 * Stack Monitoring API.
 * OpenAPI spec version: 20210330
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
import * as model from "../model";
/**
 * Request details for importing resources from Telemetry like resources from OCI Native Services and prometheus.
 *
 */
export interface ImportOciTelemetryResourcesTaskDetails extends model.MonitoredResourceTaskDetails {
    /**
     * Source from where the metrics pushed to telemetry.
     * Possible values:
     *   * OCI_TELEMETRY_NATIVE      - The metrics are pushed to telemetry from OCI Native Services.
     *   * OCI_TELEMETRY_PROMETHEUS  - The metrics are pushed to telemetry from Prometheus.
     *
     */
    "source": ImportOciTelemetryResourcesTaskDetails.Source;
    /**
     * Name space to be used for OCI Native service resources discovery.
     */
    "namespace": string;
    /**
     * The resource group to use while fetching metrics from telemetry.
     * If not specified, resource group will be skipped in the list metrics request.
     *
     */
    "resourceGroup"?: string;
    /**
     * List of metrics to be used to calculate the availability of the resource.
     * Resource is considered to be up if at least one of the specified metrics is available for
     * the resource during the specified interval using the property
     * 'availabilityProxyMetricCollectionIntervalInSeconds'.
     * If no metrics are specified, availability will not be calculated for the resource.
     *
     */
    "availabilityProxyMetrics"?: Array<string>;
    /**
     * Metrics collection interval in seconds used when calculating the availability of the
     * resource based on metrics specified using the property 'availabilityProxyMetrics'.
     *  Note: Numbers greater than Number.MAX_SAFE_INTEGER will result in rounding issues.
     */
    "availabilityProxyMetricCollectionInterval"?: number;
    "type": string;
}
export declare namespace ImportOciTelemetryResourcesTaskDetails {
    enum Source {
        OciTelemetryNative = "OCI_TELEMETRY_NATIVE",
        OciTelemetryPrometheus = "OCI_TELEMETRY_PROMETHEUS",
        /**
         * This value is used if a service returns a value for this enum that is not recognized by this
         * version of the SDK.
         */
        UnknownValue = "UNKNOWN_VALUE"
    }
    function getJsonObj(obj: ImportOciTelemetryResourcesTaskDetails, isParentJsonObj?: boolean): object;
    const type = "IMPORT_OCI_TELEMETRY_RESOURCES";
    function getDeserializedJsonObj(obj: ImportOciTelemetryResourcesTaskDetails, isParentJsonObj?: boolean): object;
}
