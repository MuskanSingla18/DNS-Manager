"use strict";
/**
 * OciControlCenterCp API
 * A description of the OciControlCenterCp API
 * OpenAPI spec version: 20231107
 *
 *
 * NOTE: This class is auto generated by OracleSDKGenerator.
 * Do not edit the class manually.
 *
 * Copyright (c) 2020, 2024, Oracle and/or its affiliates.  All rights reserved.
 * This software is dual-licensed to you under the Universal Permissive License (UPL) 1.0 as shown at https://oss.oracle.com/licenses/upl or Apache License 2.0 as shown at http://www.apache.org/licenses/LICENSE-2.0. You may choose either license.
 */
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CapacityManagementClient = exports.CapacityManagementApiKeys = void 0;
const common = require("oci-common");
const model = __importStar(require("./model"));
const capacitymanagement_waiter_1 = require("./capacitymanagement-waiter");
const oci_common_1 = require("oci-common");
const Breaker = require("opossum");
// ===============================================
// This file is autogenerated - Please do not edit
// ===============================================
var CapacityManagementApiKeys;
(function (CapacityManagementApiKeys) {
})(CapacityManagementApiKeys = exports.CapacityManagementApiKeys || (exports.CapacityManagementApiKeys = {}));
/**
 * This service client uses {@link common.CircuitBreaker.DefaultConfiguration} for all the operations by default if no circuit breaker configuration is defined by the user.
 */
class CapacityManagementClient {
    constructor(params, clientConfiguration) {
        this["_realmSpecificEndpointTemplateEnabled"] = undefined;
        this["_endpoint"] = "";
        this["_defaultHeaders"] = {};
        this._circuitBreaker = null;
        this._httpOptions = undefined;
        this._bodyDuplexMode = undefined;
        this.targetService = "CapacityManagement";
        this._regionId = "";
        this._lastSetRegionOrRegionId = "";
        const requestSigner = params.authenticationDetailsProvider
            ? new common.DefaultRequestSigner(params.authenticationDetailsProvider)
            : null;
        if (clientConfiguration) {
            this._clientConfiguration = clientConfiguration;
            this._circuitBreaker = clientConfiguration.circuitBreaker
                ? clientConfiguration.circuitBreaker.circuit
                : null;
            this._httpOptions = clientConfiguration.httpOptions
                ? clientConfiguration.httpOptions
                : undefined;
            this._bodyDuplexMode = clientConfiguration.bodyDuplexMode
                ? clientConfiguration.bodyDuplexMode
                : undefined;
        }
        if (!oci_common_1.developerToolConfiguration.isServiceEnabled("capacitymanagement")) {
            let errmsg = "The developerToolConfiguration configuration disabled this service, this behavior is controlled by developerToolConfiguration.ociEnabledServiceSet variable. Please check if your local developer_tool_configuration file has configured the service you're targeting or contact the cloud provider on the availability of this service : ";
            throw errmsg.concat("capacitymanagement");
        }
        // if circuit breaker is not created, check if circuit breaker system is enabled to use default circuit breaker
        const specCircuitBreakerEnabled = true;
        if (!this._circuitBreaker &&
            common.utils.isCircuitBreakerSystemEnabled(clientConfiguration) &&
            (specCircuitBreakerEnabled || common.CircuitBreaker.DefaultCircuitBreakerOverriden)) {
            this._circuitBreaker = new common.CircuitBreaker().circuit;
        }
        this._httpClient =
            params.httpClient ||
                new common.FetchHttpClient(requestSigner, this._circuitBreaker, this._httpOptions, this._bodyDuplexMode);
        if (params.authenticationDetailsProvider &&
            common.isRegionProvider(params.authenticationDetailsProvider)) {
            const provider = params.authenticationDetailsProvider;
            if (provider.getRegion()) {
                this.region = provider.getRegion();
            }
        }
    }
    /**
     * Get the endpoint that is being used to call (ex, https://www.example.com).
     */
    get endpoint() {
        return this._endpoint;
    }
    /**
     * Sets the endpoint to call (ex, https://www.example.com).
     * @param endpoint The endpoint of the service.
     */
    set endpoint(endpoint) {
        this._endpoint = endpoint;
        this._endpoint = this._endpoint + "/20231107";
        if (this.logger)
            this.logger.info(`CapacityManagementClient endpoint set to ${this._endpoint}`);
    }
    get logger() {
        return common.LOG.logger;
    }
    /**
     * Determines whether realm specific endpoint should be used or not.
     * Set realmSpecificEndpointTemplateEnabled to "true" if the user wants to enable use of realm specific endpoint template, otherwise set it to "false"
     * @param realmSpecificEndpointTemplateEnabled flag to enable the use of realm specific endpoint template
     */
    set useRealmSpecificEndpointTemplate(realmSpecificEndpointTemplateEnabled) {
        this._realmSpecificEndpointTemplateEnabled = realmSpecificEndpointTemplateEnabled;
        if (this.logger)
            this.logger.info(`realmSpecificEndpointTemplateEnabled set to ${this._realmSpecificEndpointTemplateEnabled}`);
        if (this._lastSetRegionOrRegionId === common.Region.REGION_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CapacityManagementClient.serviceEndpointTemplate, this._region, CapacityManagementClient.endpointServiceName);
        }
        else if (this._lastSetRegionOrRegionId === common.Region.REGION_ID_STRING) {
            this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CapacityManagementClient.serviceEndpointTemplate, this._regionId, CapacityManagementClient.endpointServiceName);
        }
    }
    /**
     * Sets the region to call (ex, Region.US_PHOENIX_1).
     * Note, this will call {@link #endpoint(String) endpoint} after resolving the endpoint.
     * @param region The region of the service.
     */
    set region(region) {
        this._region = region;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegion(CapacityManagementClient.serviceEndpointTemplate, region, CapacityManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_STRING;
    }
    /**
     * Sets the regionId to call (ex, 'us-phoenix-1').
     *
     * Note, this will first try to map the region ID to a known Region and call {@link #region(Region) region}.
     * If no known Region could be determined, it will create an endpoint assuming its in default Realm OC1
     * and then call {@link #endpoint(String) endpoint}.
     * @param regionId The public region ID.
     */
    set regionId(regionId) {
        this._regionId = regionId;
        this.endpoint = common.EndpointBuilder.createEndpointFromRegionId(CapacityManagementClient.serviceEndpointTemplate, regionId, CapacityManagementClient.endpointServiceName);
        this._lastSetRegionOrRegionId = common.Region.REGION_ID_STRING;
    }
    /**
     * Creates a new CapacityManagementWaiter for resources for this service.
     *
     * @param config The waiter configuration for termination and delay strategy
     * @return The service waiters.
     */
    createWaiters(config) {
        this._waiters = new capacitymanagement_waiter_1.CapacityManagementWaiter(this, config);
        return this._waiters;
    }
    /**
     * Gets the waiters available for resources for this service.
     *
     * @return The service waiters.
     */
    getWaiters() {
        if (this._waiters) {
            return this._waiters;
        }
        throw Error("Waiters do not exist. Please create waiters.");
    }
    /**
     * Shutdown the circuit breaker used by the client when it is no longer needed
     */
    shutdownCircuitBreaker() {
        if (this._circuitBreaker) {
            this._circuitBreaker.shutdown();
        }
    }
    /**
     * Create availability catalog
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccAvailabilityCatalogRequest
     * @return CreateOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/CreateOccAvailabilityCatalog.ts.html |here} to see how to use CreateOccAvailabilityCatalog API.
     */
    createOccAvailabilityCatalog(createOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccAvailabilityCatalog.");
            const operationName = "createOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccAvailabilityCatalogRequest.opcRetryToken,
                "opc-request-id": createOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccAvailabilityCatalogRequest.createOccAvailabilityCatalogDetails, "CreateOccAvailabilityCatalogDetails", model.CreateOccAvailabilityCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Create Capacity Request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param CreateOccCapacityRequestRequest
     * @return CreateOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/CreateOccCapacityRequest.ts.html |here} to see how to use CreateOccCapacityRequest API.
     */
    createOccCapacityRequest(createOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#createOccCapacityRequest.");
            const operationName = "createOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": createOccCapacityRequestRequest.opcRetryToken,
                "opc-request-id": createOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, createOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests",
                method: "POST",
                bodyContent: common.ObjectSerializer.serialize(createOccCapacityRequestRequest.createOccCapacityRequestDetails, "CreateOccCapacityRequestDetails", model.CreateOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the availability catalog resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccAvailabilityCatalogRequest
     * @return DeleteOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/DeleteOccAvailabilityCatalog.ts.html |here} to see how to use DeleteOccAvailabilityCatalog API.
     */
    deleteOccAvailabilityCatalog(deleteOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccAvailabilityCatalog.");
            const operationName = "deleteOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": deleteOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccAvailabilityCatalogRequest.ifMatch,
                "opc-request-id": deleteOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Deletes the capacity request resource.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param DeleteOccCapacityRequestRequest
     * @return DeleteOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/DeleteOccCapacityRequest.ts.html |here} to see how to use DeleteOccCapacityRequest API.
     */
    deleteOccCapacityRequest(deleteOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#deleteOccCapacityRequest.");
            const operationName = "deleteOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": deleteOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": deleteOccCapacityRequestRequest.ifMatch,
                "opc-request-id": deleteOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, deleteOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "DELETE",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get details about availability catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccAvailabilityCatalogRequest
     * @return GetOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/GetOccAvailabilityCatalog.ts.html |here} to see how to use GetOccAvailabilityCatalog API.
     */
    getOccAvailabilityCatalog(getOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccAvailabilityCatalog.");
            const operationName = "getOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": getOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Returns the binary contents of the availability catalog. Can be saved as a csv file.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccAvailabilityCatalogContentRequest
     * @return GetOccAvailabilityCatalogContentResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/GetOccAvailabilityCatalogContent.ts.html |here} to see how to use GetOccAvailabilityCatalogContent API.
     */
    getOccAvailabilityCatalogContent(getOccAvailabilityCatalogContentRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccAvailabilityCatalogContent.");
            const operationName = "getOccAvailabilityCatalogContent";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": getOccAvailabilityCatalogContentRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": getOccAvailabilityCatalogContentRequest.opcRetryToken,
                "opc-request-id": getOccAvailabilityCatalogContentRequest.opcRequestId,
                "if-match": getOccAvailabilityCatalogContentRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccAvailabilityCatalogContentRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/content",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: response.body,
                    bodyKey: "value",
                    bodyModel: "string",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Get details about the capacity request.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccCapacityRequestRequest
     * @return GetOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/GetOccCapacityRequest.ts.html |here} to see how to use GetOccCapacityRequest API.
     */
    getOccCapacityRequest(getOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccCapacityRequest.");
            const operationName = "getOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": getOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Gets information about the specified customer group.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param GetOccCustomerGroupRequest
     * @return GetOccCustomerGroupResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/GetOccCustomerGroup.ts.html |here} to see how to use GetOccCustomerGroup API.
     */
    getOccCustomerGroup(getOccCustomerGroupRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#getOccCustomerGroup.");
            const operationName = "getOccCustomerGroup";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCustomerGroupId}": getOccCustomerGroupRequest.occCustomerGroupId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": getOccCustomerGroupRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, getOccCustomerGroupRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups/{occCustomerGroupId}",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroup",
                    bodyModel: model.OccCustomerGroup,
                    type: "model.OccCustomerGroup",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists availabilities for a particular availability catalog.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilitiesRequest
     * @return ListOccAvailabilitiesResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccAvailabilities.ts.html |here} to see how to use ListOccAvailabilities API.
     */
    listOccAvailabilities(listOccAvailabilitiesRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilities.");
            const operationName = "listOccAvailabilities";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": listOccAvailabilitiesRequest.occAvailabilityCatalogId
            };
            const queryParams = {
                "dateExpectedCapacityHandover": listOccAvailabilitiesRequest.dateExpectedCapacityHandover,
                "resourceName": listOccAvailabilitiesRequest.resourceName,
                "resourceType": listOccAvailabilitiesRequest.resourceType,
                "workloadType": listOccAvailabilitiesRequest.workloadType,
                "limit": listOccAvailabilitiesRequest.limit,
                "page": listOccAvailabilitiesRequest.page,
                "sortOrder": listOccAvailabilitiesRequest.sortOrder,
                "sortBy": listOccAvailabilitiesRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilitiesRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilitiesRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/occAvailabilities",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCollection",
                    bodyModel: model.OccAvailabilityCollection,
                    type: "model.OccAvailabilityCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all availability catalogs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilityCatalogsRequest
     * @return ListOccAvailabilityCatalogsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccAvailabilityCatalogs.ts.html |here} to see how to use ListOccAvailabilityCatalogs API.
     */
    listOccAvailabilityCatalogs(listOccAvailabilityCatalogsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilityCatalogs.");
            const operationName = "listOccAvailabilityCatalogs";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccAvailabilityCatalogsRequest.compartmentId,
                "namespace": listOccAvailabilityCatalogsRequest.namespace,
                "id": listOccAvailabilityCatalogsRequest.id,
                "displayName": listOccAvailabilityCatalogsRequest.displayName,
                "catalogState": listOccAvailabilityCatalogsRequest.catalogState,
                "limit": listOccAvailabilityCatalogsRequest.limit,
                "page": listOccAvailabilityCatalogsRequest.page,
                "sortOrder": listOccAvailabilityCatalogsRequest.sortOrder,
                "sortBy": listOccAvailabilityCatalogsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilityCatalogsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilityCatalogsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalogCollection",
                    bodyModel: model.OccAvailabilityCatalogCollection,
                    type: "model.OccAvailabilityCatalogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * An internal api to list availability catalogs.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccAvailabilityCatalogsInternalRequest
     * @return ListOccAvailabilityCatalogsInternalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccAvailabilityCatalogsInternal.ts.html |here} to see how to use ListOccAvailabilityCatalogsInternal API.
     */
    listOccAvailabilityCatalogsInternal(listOccAvailabilityCatalogsInternalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccAvailabilityCatalogsInternal.");
            const operationName = "listOccAvailabilityCatalogsInternal";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccAvailabilityCatalogsInternalRequest.compartmentId,
                "namespace": listOccAvailabilityCatalogsInternalRequest.namespace,
                "id": listOccAvailabilityCatalogsInternalRequest.id,
                "displayName": listOccAvailabilityCatalogsInternalRequest.displayName,
                "catalogState": listOccAvailabilityCatalogsInternalRequest.catalogState,
                "occCustomerGroupId": listOccAvailabilityCatalogsInternalRequest.occCustomerGroupId,
                "limit": listOccAvailabilityCatalogsInternalRequest.limit,
                "page": listOccAvailabilityCatalogsInternalRequest.page,
                "sortOrder": listOccAvailabilityCatalogsInternalRequest.sortOrder,
                "sortBy": listOccAvailabilityCatalogsInternalRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccAvailabilityCatalogsInternalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccAvailabilityCatalogsInternalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occAvailabilityCatalogs",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalogCollection",
                    bodyModel: model.OccAvailabilityCatalogCollection,
                    type: "model.OccAvailabilityCatalogCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all capacity requests.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCapacityRequestsRequest
     * @return ListOccCapacityRequestsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccCapacityRequests.ts.html |here} to see how to use ListOccCapacityRequests API.
     */
    listOccCapacityRequests(listOccCapacityRequestsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCapacityRequests.");
            const operationName = "listOccCapacityRequests";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCapacityRequestsRequest.compartmentId,
                "occAvailabilityCatalogId": listOccCapacityRequestsRequest.occAvailabilityCatalogId,
                "namespace": listOccCapacityRequestsRequest.namespace,
                "displayName": listOccCapacityRequestsRequest.displayName,
                "id": listOccCapacityRequestsRequest.id,
                "limit": listOccCapacityRequestsRequest.limit,
                "page": listOccCapacityRequestsRequest.page,
                "sortOrder": listOccCapacityRequestsRequest.sortOrder,
                "sortBy": listOccCapacityRequestsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCapacityRequestsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCapacityRequestsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequestCollection",
                    bodyModel: model.OccCapacityRequestCollection,
                    type: "model.OccCapacityRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * An internal api to list all capacity requests.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCapacityRequestsInternalRequest
     * @return ListOccCapacityRequestsInternalResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccCapacityRequestsInternal.ts.html |here} to see how to use ListOccCapacityRequestsInternal API.
     */
    listOccCapacityRequestsInternal(listOccCapacityRequestsInternalRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCapacityRequestsInternal.");
            const operationName = "listOccCapacityRequestsInternal";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCapacityRequestsInternalRequest.compartmentId,
                "occCustomerGroupId": listOccCapacityRequestsInternalRequest.occCustomerGroupId,
                "occAvailabilityCatalogId": listOccCapacityRequestsInternalRequest.occAvailabilityCatalogId,
                "namespace": listOccCapacityRequestsInternalRequest.namespace,
                "displayName": listOccCapacityRequestsInternalRequest.displayName,
                "id": listOccCapacityRequestsInternalRequest.id,
                "limit": listOccCapacityRequestsInternalRequest.limit,
                "page": listOccCapacityRequestsInternalRequest.page,
                "sortOrder": listOccCapacityRequestsInternalRequest.sortOrder,
                "sortBy": listOccCapacityRequestsInternalRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCapacityRequestsInternalRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCapacityRequestsInternalRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occCapacityRequests",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequestCollection",
                    bodyModel: model.OccCapacityRequestCollection,
                    type: "model.OccCapacityRequestCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Lists all the customer groups.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param ListOccCustomerGroupsRequest
     * @return ListOccCustomerGroupsResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/ListOccCustomerGroups.ts.html |here} to see how to use ListOccCustomerGroups API.
     */
    listOccCustomerGroups(listOccCustomerGroupsRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#listOccCustomerGroups.");
            const operationName = "listOccCustomerGroups";
            const apiReferenceLink = "";
            const pathParams = {};
            const queryParams = {
                "compartmentId": listOccCustomerGroupsRequest.compartmentId,
                "status": listOccCustomerGroupsRequest.status,
                "displayName": listOccCustomerGroupsRequest.displayName,
                "id": listOccCustomerGroupsRequest.id,
                "limit": listOccCustomerGroupsRequest.limit,
                "page": listOccCustomerGroupsRequest.page,
                "sortOrder": listOccCustomerGroupsRequest.sortOrder,
                "sortBy": listOccCustomerGroupsRequest.sortBy
            };
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-request-id": listOccCustomerGroupsRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, listOccCustomerGroupsRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCustomerGroups",
                method: "GET",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCustomerGroupCollection",
                    bodyModel: model.OccCustomerGroupCollection,
                    type: "model.OccCustomerGroupCollection",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-next-page"),
                            key: "opcNextPage",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Updates the OccCapacityRequest by evaluating a sequence of instructions.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PatchOccCapacityRequestRequest
     * @return PatchOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/PatchOccCapacityRequest.ts.html |here} to see how to use PatchOccCapacityRequest API.
     */
    patchOccCapacityRequest(patchOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#patchOccCapacityRequest.");
            const operationName = "patchOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": patchOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": patchOccCapacityRequestRequest.ifMatch,
                "opc-request-id": patchOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, patchOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "PATCH",
                bodyContent: common.ObjectSerializer.serialize(patchOccCapacityRequestRequest.patchOccCapacityRequestDetails, "PatchOccCapacityRequestDetails", model.PatchOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * Publishes the version of availability catalog specified by the operator. This makes that catalog version visible to customers.
     *
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param PublishOccAvailabilityCatalogRequest
     * @return PublishOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/PublishOccAvailabilityCatalog.ts.html |here} to see how to use PublishOccAvailabilityCatalog API.
     */
    publishOccAvailabilityCatalog(publishOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#publishOccAvailabilityCatalog.");
            const operationName = "publishOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": publishOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "opc-retry-token": publishOccAvailabilityCatalogRequest.opcRetryToken,
                "opc-request-id": publishOccAvailabilityCatalogRequest.opcRequestId,
                "if-match": publishOccAvailabilityCatalogRequest.ifMatch
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, publishOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}/actions/publish",
                method: "POST",
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    responseHeaders: [
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The internal api to update the capacity request. This api will be used by operators for updating the capacity request to either completed, resubmitted or rejected.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateInternalOccCapacityRequestRequest
     * @return UpdateInternalOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/UpdateInternalOccCapacityRequest.ts.html |here} to see how to use UpdateInternalOccCapacityRequest API.
     */
    updateInternalOccCapacityRequest(updateInternalOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateInternalOccCapacityRequest.");
            const operationName = "updateInternalOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": updateInternalOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateInternalOccCapacityRequestRequest.ifMatch,
                "opc-request-id": updateInternalOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateInternalOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/internal/occCapacityRequests/{occCapacityRequestId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateInternalOccCapacityRequestRequest.updateInternalOccCapacityRequestDetails, "UpdateInternalOccCapacityRequestDetails", model.UpdateInternalOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the availability catalog. Currently only freeform tags can be updated via this api.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccAvailabilityCatalogRequest
     * @return UpdateOccAvailabilityCatalogResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/UpdateOccAvailabilityCatalog.ts.html |here} to see how to use UpdateOccAvailabilityCatalog API.
     */
    updateOccAvailabilityCatalog(updateOccAvailabilityCatalogRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccAvailabilityCatalog.");
            const operationName = "updateOccAvailabilityCatalog";
            const apiReferenceLink = "";
            const pathParams = {
                "{occAvailabilityCatalogId}": updateOccAvailabilityCatalogRequest.occAvailabilityCatalogId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccAvailabilityCatalogRequest.ifMatch,
                "opc-request-id": updateOccAvailabilityCatalogRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccAvailabilityCatalogRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occAvailabilityCatalogs/{occAvailabilityCatalogId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccAvailabilityCatalogRequest.updateOccAvailabilityCatalogDetails, "UpdateOccAvailabilityCatalogDetails", model.UpdateOccAvailabilityCatalogDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occAvailabilityCatalog",
                    bodyModel: model.OccAvailabilityCatalog,
                    type: "model.OccAvailabilityCatalog",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
    /**
     * The request to update the capacity request. The user can perform actions like closing a partially completed request so that it doesn't go ahead for full completion.
     * This operation uses {@link common.OciSdkDefaultRetryConfiguration} by default if no retry configuration is defined by the user.
     * @param UpdateOccCapacityRequestRequest
     * @return UpdateOccCapacityRequestResponse
     * @throws OciError when an error occurs
     * @example Click {@link https://docs.cloud.oracle.com/en-us/iaas/tools/typescript-sdk-examples/2.83.0/capacitymanagement/UpdateOccCapacityRequest.ts.html |here} to see how to use UpdateOccCapacityRequest API.
     */
    updateOccCapacityRequest(updateOccCapacityRequestRequest) {
        return __awaiter(this, void 0, void 0, function* () {
            if (this.logger)
                this.logger.debug("Calling operation CapacityManagementClient#updateOccCapacityRequest.");
            const operationName = "updateOccCapacityRequest";
            const apiReferenceLink = "";
            const pathParams = {
                "{occCapacityRequestId}": updateOccCapacityRequestRequest.occCapacityRequestId
            };
            const queryParams = {};
            let headerParams = {
                "Content-Type": common.Constants.APPLICATION_JSON,
                "if-match": updateOccCapacityRequestRequest.ifMatch,
                "opc-request-id": updateOccCapacityRequestRequest.opcRequestId
            };
            const specRetryConfiguration = common.OciSdkDefaultRetryConfiguration;
            const retrier = oci_common_1.GenericRetrier.createPreferredRetrier(this._clientConfiguration ? this._clientConfiguration.retryConfiguration : undefined, updateOccCapacityRequestRequest.retryConfiguration, specRetryConfiguration);
            if (this.logger)
                retrier.logger = this.logger;
            const request = yield oci_common_1.composeRequest({
                baseEndpoint: this._endpoint,
                defaultHeaders: this._defaultHeaders,
                path: "/occCapacityRequests/{occCapacityRequestId}",
                method: "PUT",
                bodyContent: common.ObjectSerializer.serialize(updateOccCapacityRequestRequest.updateOccCapacityRequestDetails, "UpdateOccCapacityRequestDetails", model.UpdateOccCapacityRequestDetails.getJsonObj),
                pathParams: pathParams,
                headerParams: headerParams,
                queryParams: queryParams
            });
            try {
                const response = yield retrier.makeServiceCall(this._httpClient, request, this.targetService, operationName, apiReferenceLink);
                const sdkResponse = oci_common_1.composeResponse({
                    responseObject: {},
                    body: yield response.json(),
                    bodyKey: "occCapacityRequest",
                    bodyModel: model.OccCapacityRequest,
                    type: "model.OccCapacityRequest",
                    responseHeaders: [
                        {
                            value: response.headers.get("etag"),
                            key: "etag",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("opc-request-id"),
                            key: "opcRequestId",
                            dataType: "string"
                        },
                        {
                            value: response.headers.get("retry-after"),
                            key: "retryAfter",
                            dataType: "number"
                        }
                    ]
                });
                return sdkResponse;
            }
            catch (err) {
                throw err;
            }
        });
    }
}
exports.CapacityManagementClient = CapacityManagementClient;
CapacityManagementClient.serviceEndpointTemplate = "https://control-center-cp.{region}.oci.{secondLevelDomain}";
CapacityManagementClient.endpointServiceName = "control-center-cp";
//# sourceMappingURL=client.js.map